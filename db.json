{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/update/hexo_about_me_logo.jpg","path":"update/hexo_about_me_logo.jpg","modified":0,"renderable":0},{"_id":"source/update/money2.png","path":"update/money2.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/update/money.jpg","path":"update/money.jpg","modified":0,"renderable":0},{"_id":"source/update/saber.jpg","path":"update/saber.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/update/SeeYouAgain123.mp3","path":"update/SeeYouAgain123.mp3","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"e1dc638f9b805f502621556136197bbd2c861292","modified":1463137526975},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1460719509703},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1460719509706},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1460719509719},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1460719509722},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1460719509725},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1460719509729},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1460719509733},{"_id":"themes/next/_config.yml","hash":"e090ce5e62c255cf0cc1d3df218359a746f752a3","modified":1463213485078},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1460719509741},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1460719509744},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1460719510011},{"_id":"source/_posts/ReverseInteger解题报告.md","hash":"4fcda631914b5dc2d4917d4ed7f9cf3c6ad7e0d1","modified":1466864628226},{"_id":"source/_posts/SingleNumber解题报告.md","hash":"30c1fad43afdca5ba484b975fcef3f536169f022","modified":1463213730582},{"_id":"source/_posts/comparator接口与Comparable接口的区别.md","hash":"c63e7dcda133448fba2a63e77ff54c33ac6615dc","modified":1463150780933},{"_id":"source/_posts/java-PermGen-去哪了.md","hash":"d6c91e31f1e764d949b534998a01266eb1ddb71c","modified":1463213335197},{"_id":"source/_posts/java内存溢出.md","hash":"2c749f7f55417893753ac562323c919614121a18","modified":1463213693239},{"_id":"source/_posts/爬取教务在线学生相片.md","hash":"079c9222694dae32458dfaf15773691e39f8d64b","modified":1463223690703},{"_id":"source/_posts/知识库.md","hash":"3959c49ba44f1dbe556f79c40eacfa78a2be6dc4","modified":1464522425781},{"_id":"source/about/index.md","hash":"053d94036f394b961825d20f9443f5ffde5e9f9b","modified":1463386764044},{"_id":"source/categories/index.md","hash":"de4cf5adb06cd20f9a6c0467bddfef889eb88181","modified":1460726383542},{"_id":"source/tags/index.md","hash":"5dcb135b23518d14b9ace30db020063180dd95be","modified":1460724220495},{"_id":"source/update/hexo_about_me_logo.jpg","hash":"37bc83b05202da15eb638816d5876253f1e821ed","modified":1463224632941},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1460719509747},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1460719509751},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1460719509754},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1460719509757},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1460719509760},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1460719509764},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1460719509767},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1460719509771},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1460719509774},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1460719509777},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1460719509782},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1460719509992},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1460719509995},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1460719509998},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1460719510002},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1460719510005},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1460719510008},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1460719510017},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1460719510807},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1460719510814},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1460719510823},{"_id":"source/update/money2.png","hash":"1fd8b413aa249366ca162275af952d545899bd89","modified":1463144787253},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1460719510341},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1460719509786},{"_id":"themes/next/layout/_macro/post.swig","hash":"74e316a693166969af1de1eb23cd8077dc922963","modified":1460719509793},{"_id":"themes/next/layout/_macro/reward.swig","hash":"05cad11b3efcb8b7e74677bd7c13ad53d268476a","modified":1460719509798},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"8cd78f0f934318524393fcb26dbdff9be4df70b9","modified":1460719509803},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1460719509807},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1460719509810},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1460719509815},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1460719509819},{"_id":"themes/next/layout/_partials/head.swig","hash":"d5eadfe13cd28aa4626a1b17e18deaafe0a0452e","modified":1460719509824},{"_id":"themes/next/layout/_partials/header.swig","hash":"b3f4f07f03bedd615039934b44d552b91e2a4a1d","modified":1460719509831},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1460719509834},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1460719509837},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1460719509877},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1460719509881},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1460719509884},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1460719509987},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1460719510021},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1460719510026},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1460719510035},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1460719510341},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1460719510345},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1460719510348},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1460719510353},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1460719510357},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1460719510361},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1460719510366},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1460719510369},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1460719510370},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1460719510371},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1460719510373},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1460719510376},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1460719510377},{"_id":"source/update/money.jpg","hash":"7d0dd35218170c688753ef602419b62372f378bb","modified":1463144034726},{"_id":"source/update/saber.jpg","hash":"baf649e66a0994d28d9316482c138d138801480c","modified":1460723097930},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1460719509888},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1460719509888},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1460719510238},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1460719510238},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1460719510244},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1460719510320},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1460719510332},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b83439cfca7b2c81846cd35596e27381ea4045e9","modified":1460719509827},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1460719509840},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1460719509845},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1460719509848},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1460719509852},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1460719509862},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1460719509865},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1460719509873},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1460719509888},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1460719509891},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1460719509894},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1460719509927},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"aebc73513c9cbbbbda2935e2eb18e09bb1c24bf8","modified":1460719509952},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1460719509963},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1460719509972},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1460719509980},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1460719510238},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1460719510239},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"10ca6744a8594c1a085b50120f4ed0a1ef433f40","modified":1460719510244},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1460719510320},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"6da593f19a9c8e76b43bc05172923d82b2aefa03","modified":1460719510324},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ea6e519065702dfdb1dc299f85411b9ee2bcf4ce","modified":1460719510332},{"_id":"themes/next/source/css/_variables/default.styl","hash":"17779fa6fa3c9e1262ba100a86a8dec730c2f312","modified":1460719510336},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1460719510390},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1460719510395},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1460719510403},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1460719510413},{"_id":"themes/next/source/js/src/post-details.js","hash":"b8c0b5563cc6edbac82ed5a4f43f72800029ea87","modified":1460719510423},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1460719510446},{"_id":"themes/next/source/js/src/utils.js","hash":"14521498ba62a9a4050b86fb1eae0babd5b88c8a","modified":1460719510456},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1460719510460},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1460719510463},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1460719510534},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1460719510539},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1460719510546},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1460719510549},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1460719510585},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1460719510588},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1460719510593},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1460719510596},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1460719510598},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1460719510670},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1460719510701},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1460719510706},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1460719510710},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1460719510715},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1460719510729},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1460719510723},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1460719510752},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1460719510755},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1460719510787},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1460719510795},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1460719510804},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1460719510697},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1460719509900},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1460719509903},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1460719509907},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1460719509913},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1460719509918},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1460719509924},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1460719509934},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1460719509940},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1460719510038},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1460719510041},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1460719510044},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1460719510047},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1460719510100},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1460719510174},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1460719510214},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1460719510218},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"302fca2d38d0175f5b5c7c42bc80b5a87404a50d","modified":1460719510222},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1460719510227},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1460719510231},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"d110befc142dbb881c4fdcb94df65ed2f603f1c1","modified":1460719510234},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1460719510248},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1460719510253},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1460719510256},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1460719510261},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1460719510265},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5187512cc4b2ce095230928c7046e0b26c3897bd","modified":1460719510275},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1460719510270},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1460719510280},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1460719510284},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1460719510288},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1460719510287},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"f70fa81275eb4e0ea5e5a740b7a35539c6ffa9ba","modified":1460719510291},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1460719510295},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1460719510298},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1460719510302},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1460719510305},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1460719510308},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"7e8da9aa4b0ef05f8100bdb6998b6db6e4d39639","modified":1460719510312},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1460719510315},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1460719510427},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1460719510464},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1460719510465},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1460719510466},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1460719510469},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1460719510470},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1460719510471},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1460719510508},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1460719510518},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1460719510531},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1460719510559},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1460719510581},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1460719510603},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1460719510607},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1460719510611},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1460719510666},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1460719510739},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1460719510748},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1460719510619},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1460719510636},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1460719510661},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1460719510772},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1460719510051},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1460719510055},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1460719510058},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1460719510062},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1460719510066},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1460719510071},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4f7dfc2826a95a0d571976d9084b7e7175d99b0f","modified":1460719510076},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1460719510079},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1460719510086},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1460719510089},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1460719510093},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1460719510096},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1460719510105},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1460719510109},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1460719510113},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1460719510118},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1460719510122},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1460719510125},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1460719510127},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"758d64ad65f718537ab5bfe5592a626abc40987e","modified":1460719510134},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1460719510130},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1460719510138},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a1e83e7cd686239d75caa12b7e74d69f3e1d2d90","modified":1460719510141},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1460719510144},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"70407054dbb5180c69e50ea2655d32835494394e","modified":1460719510147},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1460719510151},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1460719510154},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1460719510158},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1460719510161},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1460719510164},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1460719510168},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"99c4b7d1459569cda394c733845d368008a180bf","modified":1460719510171},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1460719510178},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1460719510181},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1460719510185},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1460719510189},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1460719510192},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1460719510195},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1460719510200},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1460719510203},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1460719510207},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1460719510209},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1460719510278},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1460719510472},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1460719510475},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1460719510484},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1460719510490},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1460719510493},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1460719510504},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1460719510657},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1460719510652},{"_id":"source/update/SeeYouAgain123.mp3","hash":"f971db708a828f37ed6b782df4bf5733c6e6aa58","modified":1463386136910},{"_id":"public/atom.xml","hash":"cb178eb3f3122d1b0366d1c81aa347179836e27b","modified":1484919869516},{"_id":"public/about/index.html","hash":"f582bb9d009aedc824f13a9eec8e370232fc8161","modified":1484919869544},{"_id":"public/categories/index.html","hash":"be9f2d006582a38b2ceaccee66df1d6558856382","modified":1484919869544},{"_id":"public/tags/index.html","hash":"3cf975d2c668e5ad75c52cd5a8c38dd51c6c2029","modified":1484919869545},{"_id":"public/archives/index.html","hash":"37f5dc56477610e1caf94313604f0b4428826c32","modified":1484919869545},{"_id":"public/archives/page/2/index.html","hash":"7db1b2f94c4b3f4f1386b7059ea0c8ec5e21fe08","modified":1484919869545},{"_id":"public/archives/2016/index.html","hash":"0d834248682c103770d548e92df6df038724c4a0","modified":1484919869545},{"_id":"public/archives/2016/page/2/index.html","hash":"59865dd6829d1da741035d2a354b2fd07f6d46de","modified":1484919869546},{"_id":"public/archives/2016/04/index.html","hash":"4aae158431ba4e77ab89947e5a77f9323fafce78","modified":1484919869546},{"_id":"public/archives/2016/05/index.html","hash":"d9258b60e1ea2b85fe3e898b38c83be81e31cbd3","modified":1484919869547},{"_id":"public/archives/2016/05/page/2/index.html","hash":"8bd36b4940cf37cc903efb83964234b778a6b3b3","modified":1484919869548},{"_id":"public/archives/2016/06/index.html","hash":"ebeeb4d75ff18c8b053a255db8ce2529fbc14df3","modified":1484919869548},{"_id":"public/categories/java/index.html","hash":"072603282e512c45f4ed10daf312e03d1334f63d","modified":1484919869549},{"_id":"public/categories/算法/index.html","hash":"dadd20dadb2fb274eeb76d1d586e86b93ff5a388","modified":1484919869550},{"_id":"public/categories/jvm/index.html","hash":"c2fac1b1a3a148ed1247783682e241814328d9dd","modified":1484919869550},{"_id":"public/categories/python/index.html","hash":"aa05f22539ad7ca1559d87abb15bb1d3b132ff9c","modified":1484919869550},{"_id":"public/categories/其他/index.html","hash":"a50488a88443510971efbb3bc6fe0ae9a4cacdbf","modified":1484919869550},{"_id":"public/tags/leetcode/index.html","hash":"984dfccf4f69386107645ecc6f3fa8422ee4653d","modified":1484919869550},{"_id":"public/tags/java/index.html","hash":"21a4b1aa64019360b3de91da40185f461e450d43","modified":1484919869551},{"_id":"public/tags/算法/index.html","hash":"1146243b4efa357a43bce00e3683ff9d03357dc7","modified":1484919869552},{"_id":"public/tags/interesting/index.html","hash":"9785a022127ec55beb6c59347f81e9205e4775d2","modified":1484919869553},{"_id":"public/tags/jvm/index.html","hash":"d1013c1fe7089ce21ffa72ed1a32f2f3556c0418","modified":1484919869553},{"_id":"public/tags/python/index.html","hash":"edacedc14088d2bc12d3d466fc11f8a5541a9b4e","modified":1484919869553},{"_id":"public/tags/其他/index.html","hash":"5e7a63ecd2b75a7df7228884a43a668479394bbb","modified":1484919869554},{"_id":"public/2016/06/25/ReverseInteger解题报告/index.html","hash":"fbbfb42a224cdee3e8f2fb11c1a40f9e1471f23a","modified":1484919869554},{"_id":"public/2016/05/19/知识库/index.html","hash":"1674e7bea042ce476faba3ccdad373d8aea2fdf7","modified":1484919869554},{"_id":"public/2016/05/14/爬取教务在线学生相片/index.html","hash":"b0415226c8eae91fa97db372f0f5760ecd4ef3b7","modified":1484919869554},{"_id":"public/2016/05/14/java-PermGen-去哪了/index.html","hash":"47d06a7b682c7f3611be34ff75d7f5a417ab48a0","modified":1484919869555},{"_id":"public/2016/05/12/comparator接口与Comparable接口的区别/index.html","hash":"c794a4b9f25881b5f0fb3ddd2ade68676fb58f63","modified":1484919869555},{"_id":"public/2016/05/10/java内存溢出/index.html","hash":"19ffc280dd451731913dd5c21d62584d3b489d59","modified":1484919869555},{"_id":"public/2016/04/24/SingleNumber解题报告/index.html","hash":"602fe085f6c7d318f06fdb66523ef1ad7aeb88e1","modified":1484919869556},{"_id":"public/index.html","hash":"2b014eb4fd836b2bffde156433572e4dc86cf1ec","modified":1484919869557},{"_id":"public/page/2/index.html","hash":"d7aaa16c12c7e01b2cb951c660414d64fd49127a","modified":1484919869557},{"_id":"public/CNAME","hash":"e1dc638f9b805f502621556136197bbd2c861292","modified":1484919869655},{"_id":"public/update/hexo_about_me_logo.jpg","hash":"37bc83b05202da15eb638816d5876253f1e821ed","modified":1484919869656},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1484919869656},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1484919869656},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1484919869656},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1484919869657},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1484919869657},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1484919869657},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1484919869657},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1484919869657},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1484919869658},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1484919869658},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1484919869658},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1484919869658},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1484919869658},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1484919869658},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484919869659},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484919869659},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484919869660},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484919869660},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484919869660},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484919869660},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1484919869660},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1484919869661},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1484919869661},{"_id":"public/update/money2.png","hash":"1fd8b413aa249366ca162275af952d545899bd89","modified":1484919873111},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1484919873122},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1484919873140},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1484919873140},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1484919873175},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1484919873175},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1484919873176},{"_id":"public/js/src/post-details.js","hash":"10247c78fe933a0cfcaad22a2a03e7a026864461","modified":1484919873176},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1484919873176},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1484919873176},{"_id":"public/js/src/utils.js","hash":"a3a3375de818964f4cbed4d0e2c2f97ccee7199e","modified":1484919873193},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1484919873194},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1484919873194},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1484919873195},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1484919873195},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1484919873195},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1484919873196},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1484919873197},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1484919873198},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1484919873198},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1484919873199},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1484919873199},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1484919873199},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1484919873199},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1484919873199},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1484919873200},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1484919873200},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1484919873200},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1484919873200},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1484919873200},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1484919873201},{"_id":"public/css/main.css","hash":"9673b71db944373a44363828c08c0db6be86d55e","modified":1484919873201},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1484919873202},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1484919873202},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1484919873202},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1484919873203},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1484919873203},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1484919873204},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1484919873204},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1484919873204},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1484919873204},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1484919873204},{"_id":"public/update/money.jpg","hash":"7d0dd35218170c688753ef602419b62372f378bb","modified":1484919873259},{"_id":"public/update/saber.jpg","hash":"baf649e66a0994d28d9316482c138d138801480c","modified":1484919873259},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1484919873543},{"_id":"public/update/SeeYouAgain123.mp3","hash":"f971db708a828f37ed6b782df4bf5733c6e6aa58","modified":1484919875881}],"Category":[{"name":"java","_id":"ciy5uy391000528rxs3sczxo2"},{"name":"算法","_id":"ciy5uy3at000b28rx3g73xw21"},{"name":"jvm","_id":"ciy5uy3bh000g28rxxpihcz1c"},{"name":"python","_id":"ciy5uy3c7000p28rxn5cyusgv"},{"name":"其他","_id":"ciy5uy3cf000t28rxg7f7qsv5"}],"Data":[],"Page":[{"title":"about","date":"2016-04-24T05:08:51.000Z","_content":"## 0x1 序\n\n> **谁终将声震人间，必长久深自缄默！**\n> **谁终将点燃闪电，必长久如云漂泊！**\n\n## 0x2 个人状况\n\n>  **在校学生1枚，目前就读软件工程专业... ...**\n\n## 0x3 学习计划\n\n> **Java底层 学习中**\n> **Java数据结构 刚接触**\n> **Java设计模式 学习中 **\n> **python准备尝试中**\n\n## 0x4 与我联系\n\n> **email: zyf_mailz@163.com**\n> **github: [https://github.com/fatezy](https://github.com/fatezy)**\n\n## 0x5 See You Again\n\nSee You Again\n\n* * *\n![](/update/hexo_about_me_logo.jpg)\n* * *\n\n<audio autoplay=\"autoplay\">\n<source src=\"/update/SeeYouAgain123.mp3\" type=\"audio/mpeg\" />\nYour browser does not support the audio element.\n</audio>\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-04-24 13:08:51\n---\n## 0x1 序\n\n> **谁终将声震人间，必长久深自缄默！**\n> **谁终将点燃闪电，必长久如云漂泊！**\n\n## 0x2 个人状况\n\n>  **在校学生1枚，目前就读软件工程专业... ...**\n\n## 0x3 学习计划\n\n> **Java底层 学习中**\n> **Java数据结构 刚接触**\n> **Java设计模式 学习中 **\n> **python准备尝试中**\n\n## 0x4 与我联系\n\n> **email: zyf_mailz@163.com**\n> **github: [https://github.com/fatezy](https://github.com/fatezy)**\n\n## 0x5 See You Again\n\nSee You Again\n\n* * *\n![](/update/hexo_about_me_logo.jpg)\n* * *\n\n<audio autoplay=\"autoplay\">\n<source src=\"/update/SeeYouAgain123.mp3\" type=\"audio/mpeg\" />\nYour browser does not support the audio element.\n</audio>\n\n\n\n\n","updated":"2016-05-16T08:19:24.044Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciy5uy37g000128rxoz44j7ua","content":"<h2 id=\"0x1-序\"><a href=\"#0x1-序\" class=\"headerlink\" title=\"0x1 序\"></a>0x1 序</h2><blockquote>\n<p><strong>谁终将声震人间，必长久深自缄默！</strong><br><strong>谁终将点燃闪电，必长久如云漂泊！</strong></p>\n</blockquote>\n<h2 id=\"0x2-个人状况\"><a href=\"#0x2-个人状况\" class=\"headerlink\" title=\"0x2 个人状况\"></a>0x2 个人状况</h2><blockquote>\n<p> <strong>在校学生1枚，目前就读软件工程专业… …</strong></p>\n</blockquote>\n<h2 id=\"0x3-学习计划\"><a href=\"#0x3-学习计划\" class=\"headerlink\" title=\"0x3 学习计划\"></a>0x3 学习计划</h2><blockquote>\n<p><strong>Java底层 学习中</strong><br><strong>Java数据结构 刚接触</strong><br><strong>Java设计模式 学习中 </strong><br><strong>python准备尝试中</strong></p>\n</blockquote>\n<h2 id=\"0x4-与我联系\"><a href=\"#0x4-与我联系\" class=\"headerlink\" title=\"0x4 与我联系\"></a>0x4 与我联系</h2><blockquote>\n<p><strong>email: zyf_mailz@163.com</strong><br><strong>github: <a href=\"https://github.com/fatezy\" target=\"_blank\" rel=\"external\">https://github.com/fatezy</a></strong></p>\n</blockquote>\n<h2 id=\"0x5-See-You-Again\"><a href=\"#0x5-See-You-Again\" class=\"headerlink\" title=\"0x5 See You Again\"></a>0x5 See You Again</h2><p>See You Again</p>\n<hr>\n<p><img src=\"/update/hexo_about_me_logo.jpg\" alt=\"\"></p>\n<hr>\n<audio autoplay=\"autoplay\"><br><source src=\"/update/SeeYouAgain123.mp3\" type=\"audio/mpeg\"><br>Your browser does not support the audio element.<br></audio>\n\n\n\n\n","excerpt":"","more":"<h2 id=\"0x1-序\"><a href=\"#0x1-序\" class=\"headerlink\" title=\"0x1 序\"></a>0x1 序</h2><blockquote>\n<p><strong>谁终将声震人间，必长久深自缄默！</strong><br><strong>谁终将点燃闪电，必长久如云漂泊！</strong></p>\n</blockquote>\n<h2 id=\"0x2-个人状况\"><a href=\"#0x2-个人状况\" class=\"headerlink\" title=\"0x2 个人状况\"></a>0x2 个人状况</h2><blockquote>\n<p> <strong>在校学生1枚，目前就读软件工程专业… …</strong></p>\n</blockquote>\n<h2 id=\"0x3-学习计划\"><a href=\"#0x3-学习计划\" class=\"headerlink\" title=\"0x3 学习计划\"></a>0x3 学习计划</h2><blockquote>\n<p><strong>Java底层 学习中</strong><br><strong>Java数据结构 刚接触</strong><br><strong>Java设计模式 学习中 </strong><br><strong>python准备尝试中</strong></p>\n</blockquote>\n<h2 id=\"0x4-与我联系\"><a href=\"#0x4-与我联系\" class=\"headerlink\" title=\"0x4 与我联系\"></a>0x4 与我联系</h2><blockquote>\n<p><strong>email: zyf_mailz@163.com</strong><br><strong>github: <a href=\"https://github.com/fatezy\">https://github.com/fatezy</a></strong></p>\n</blockquote>\n<h2 id=\"0x5-See-You-Again\"><a href=\"#0x5-See-You-Again\" class=\"headerlink\" title=\"0x5 See You Again\"></a>0x5 See You Again</h2><p>See You Again</p>\n<hr>\n<p><img src=\"/update/hexo_about_me_logo.jpg\" alt=\"\"></p>\n<hr>\n<audio autoplay=\"autoplay\"><br><source src=\"/update/SeeYouAgain123.mp3\" type=\"audio/mpeg\" /><br>Your browser does not support the audio element.<br></audio>\n\n\n\n\n"},{"title":"categories","date":"2016-04-15T13:12:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-04-15 21:12:27\ntype: \"categories\"\n---\n","updated":"2016-04-15T13:19:43.542Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciy5uy389000328rxohyjt858","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-04-15T04:39:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-4-15 12:39:04\ntype: \"tags\"\n---\n","updated":"2016-04-15T12:43:40.495Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciy5uy39a000728rxo5ymzi8s","content":"","excerpt":"","more":""}],"Post":[{"title":"SingleNumber解题报告及java位运算","date":"2016-04-24T04:01:37.000Z","_content":"#### 概述\n题目概述：Given an array of integers, every element appears twice except for one. Find that single one.\n\n中文释意：给你一个数组，里面仅有有一个数字重复了一次，其余的数字都出现了两次，找出那个仅出现了一次的数字。\n\n注：虽然题目很水，但是解决之后对于自己对java的位运算有了新的认识，故写下这篇解题报告\n\n<!-- more -->\n\n##### 解法一\n\n解题思路：先对数组进行排序，然后找出奇数项和偶数项不同的数字\n评价： Arrays排序的效率并不高，故排序之后再进行遍历超时，无奈之下只好进行新的尝试。\n```java\n public int singleNumber(int[] nums) {\n         Arrays.sort(nums);\n        if (nums.length==0)\n            return 0;\n        if (nums.length==1)\n            return nums[0];\n        for (int i = 0; i <nums.length ; i=i+2) {\n            if (nums[i]!=nums[i+1]){\n                return nums[i];\n            }\n\n    \n        }\n\n       return 0;\n    }\n\n```\n<!-- more -->\n##### 解法二\n\n解题思路：观察数组易想到，先用set集合保存所有的数字一份，然后扩大两倍减去原数组所有数字之和，便可得到要求的结果\n\n评价： 因为set集合底层使用的是hashmap故效率较高，并未超时\n\n```java\n public int singleNumber3(int[] nums) {\n        int sum = 0;\n        for (int i:\n             nums) {\n            sum+=i;\n        }\n        Set<Integer> set = new HashSet<>();\n        for (int i:\n             nums) {\n            set.add(i);\n        }\n        Integer sum2 =0 ;\n        Iterator iterator  = set.iterator();\n        while (iterator.hasNext()){\n            sum2 += (int)iterator.next();\n        }\n        return sum2*2-sum;\n\n    }\n\n```\n\n题目做到这，虽然做完了，但是还是效率不够高，故有了这个让人眼前一亮的第三种解法\n\n\n##### 第三种解法\n思路：java位运算^\n评价： 此方法效率奇高，数学很重要 -.-|||\n\n```java\n public int singleNumber2(int[] nums) {\n        int res = 0;\n        for(int num : nums) {\n            res ^= num;\n        }\n        return res;\n    }\n```\n注： [java位运算](http://fatezy.github.io/2016/04/24/java位运算/)\n","source":"_posts/SingleNumber解题报告.md","raw":"---\ntitle: SingleNumber解题报告及java位运算\ndate: 2016-04-24 12:01:37\ncategories: \n- java\ntags: [leetcode,java,算法]\n\n---\n#### 概述\n题目概述：Given an array of integers, every element appears twice except for one. Find that single one.\n\n中文释意：给你一个数组，里面仅有有一个数字重复了一次，其余的数字都出现了两次，找出那个仅出现了一次的数字。\n\n注：虽然题目很水，但是解决之后对于自己对java的位运算有了新的认识，故写下这篇解题报告\n\n<!-- more -->\n\n##### 解法一\n\n解题思路：先对数组进行排序，然后找出奇数项和偶数项不同的数字\n评价： Arrays排序的效率并不高，故排序之后再进行遍历超时，无奈之下只好进行新的尝试。\n```java\n public int singleNumber(int[] nums) {\n         Arrays.sort(nums);\n        if (nums.length==0)\n            return 0;\n        if (nums.length==1)\n            return nums[0];\n        for (int i = 0; i <nums.length ; i=i+2) {\n            if (nums[i]!=nums[i+1]){\n                return nums[i];\n            }\n\n    \n        }\n\n       return 0;\n    }\n\n```\n<!-- more -->\n##### 解法二\n\n解题思路：观察数组易想到，先用set集合保存所有的数字一份，然后扩大两倍减去原数组所有数字之和，便可得到要求的结果\n\n评价： 因为set集合底层使用的是hashmap故效率较高，并未超时\n\n```java\n public int singleNumber3(int[] nums) {\n        int sum = 0;\n        for (int i:\n             nums) {\n            sum+=i;\n        }\n        Set<Integer> set = new HashSet<>();\n        for (int i:\n             nums) {\n            set.add(i);\n        }\n        Integer sum2 =0 ;\n        Iterator iterator  = set.iterator();\n        while (iterator.hasNext()){\n            sum2 += (int)iterator.next();\n        }\n        return sum2*2-sum;\n\n    }\n\n```\n\n题目做到这，虽然做完了，但是还是效率不够高，故有了这个让人眼前一亮的第三种解法\n\n\n##### 第三种解法\n思路：java位运算^\n评价： 此方法效率奇高，数学很重要 -.-|||\n\n```java\n public int singleNumber2(int[] nums) {\n        int res = 0;\n        for(int num : nums) {\n            res ^= num;\n        }\n        return res;\n    }\n```\n注： [java位运算](http://fatezy.github.io/2016/04/24/java位运算/)\n","slug":"SingleNumber解题报告","published":1,"updated":"2016-05-14T08:15:30.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy5uy36s000028rxphsdek6s","content":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>题目概述：Given an array of integers, every element appears twice except for one. Find that single one.</p>\n<p>中文释意：给你一个数组，里面仅有有一个数字重复了一次，其余的数字都出现了两次，找出那个仅出现了一次的数字。</p>\n<p>注：虽然题目很水，但是解决之后对于自己对java的位运算有了新的认识，故写下这篇解题报告</p>\n<a id=\"more\"></a>\n<h5 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h5><p>解题思路：先对数组进行排序，然后找出奇数项和偶数项不同的数字<br>评价： Arrays排序的效率并不高，故排序之后再进行遍历超时，无奈之下只好进行新的尝试。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (nums.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (nums.length==<span class=\"number\">1</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;nums.length ; i=i+<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (nums[i]!=nums[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<!-- more -->\n<h5 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h5><p>解题思路：观察数组易想到，先用set集合保存所有的数字一份，然后扩大两倍减去原数组所有数字之和，便可得到要求的结果</p>\n<p>评价： 因为set集合底层使用的是hashmap故效率较高，并未超时</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber3</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i:</span><br><span class=\"line\">            nums) &#123;</span><br><span class=\"line\">           sum+=i;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i:</span><br><span class=\"line\">            nums) &#123;</span><br><span class=\"line\">           set.add(i);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       Integer sum2 =<span class=\"number\">0</span> ;</span><br><span class=\"line\">       Iterator iterator  = set.iterator();</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (iterator.hasNext())&#123;</span><br><span class=\"line\">           sum2 += (<span class=\"keyword\">int</span>)iterator.next();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> sum2*<span class=\"number\">2</span>-sum;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>题目做到这，虽然做完了，但是还是效率不够高，故有了这个让人眼前一亮的第三种解法</p>\n<h5 id=\"第三种解法\"><a href=\"#第三种解法\" class=\"headerlink\" title=\"第三种解法\"></a>第三种解法</h5><p>思路：java位运算^<br>评价： 此方法效率奇高，数学很重要 -.-|||</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">           res ^= num;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>注： <a href=\"http://fatezy.github.io/2016/04/24/java位运算/\" target=\"_blank\" rel=\"external\">java位运算</a></p>\n","excerpt":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>题目概述：Given an array of integers, every element appears twice except for one. Find that single one.</p>\n<p>中文释意：给你一个数组，里面仅有有一个数字重复了一次，其余的数字都出现了两次，找出那个仅出现了一次的数字。</p>\n<p>注：虽然题目很水，但是解决之后对于自己对java的位运算有了新的认识，故写下这篇解题报告</p>","more":"<h5 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h5><p>解题思路：先对数组进行排序，然后找出奇数项和偶数项不同的数字<br>评价： Arrays排序的效率并不高，故排序之后再进行遍历超时，无奈之下只好进行新的尝试。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (nums.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (nums.length==<span class=\"number\">1</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;nums.length ; i=i+<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (nums[i]!=nums[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<!-- more -->\n<h5 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h5><p>解题思路：观察数组易想到，先用set集合保存所有的数字一份，然后扩大两倍减去原数组所有数字之和，便可得到要求的结果</p>\n<p>评价： 因为set集合底层使用的是hashmap故效率较高，并未超时</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber3</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i:</span><br><span class=\"line\">            nums) &#123;</span><br><span class=\"line\">           sum+=i;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i:</span><br><span class=\"line\">            nums) &#123;</span><br><span class=\"line\">           set.add(i);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       Integer sum2 =<span class=\"number\">0</span> ;</span><br><span class=\"line\">       Iterator iterator  = set.iterator();</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (iterator.hasNext())&#123;</span><br><span class=\"line\">           sum2 += (<span class=\"keyword\">int</span>)iterator.next();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> sum2*<span class=\"number\">2</span>-sum;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>题目做到这，虽然做完了，但是还是效率不够高，故有了这个让人眼前一亮的第三种解法</p>\n<h5 id=\"第三种解法\"><a href=\"#第三种解法\" class=\"headerlink\" title=\"第三种解法\"></a>第三种解法</h5><p>思路：java位运算^<br>评价： 此方法效率奇高，数学很重要 -.-|||</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">           res ^= num;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>注： <a href=\"http://fatezy.github.io/2016/04/24/java位运算/\">java位运算</a></p>"},{"title":"ReverseInteger解题报告","date":"2016-06-25T13:44:52.000Z","_content":"\n##### 题目概述： \nReverse digits of an integer.\n-  Example1: x = 123, return 321\n-  Example2: x = -123, return -321\n\n##### 题目解释： 逆序一个整数，其实这道题的难度，并不大，绝大多数人看到这题，都可以快速得到解题思路。但是这道题的核心是考察程序员对于边界条件的思考判断。\n\n##### 解法一：\n这是在leetcode讨论区看到的大牛的解法,一般需要考虑边界条件的解法，会有很多if判断，特殊条件之类的影响，写出的代码也是阅读性极差，而且容易丢三落四。这也是最考验代码水平的地方。\n\n<!-- more -->\n\n\n```\npublic int reverse(int x)\n{\n    int result = 0;\n\n    while (x != 0)\n    {\n        int tail = x % 10;\n        int newResult = result * 10 + tail;\n        if ((newResult - tail) / 10 != result)\n        { return 0; }\n        result = newResult;\n        x = x / 10;\n    }\n\n    return result;\n}\n```\n\n##### 解法二\n\n解题思路：题目的重点是对于末尾为0和越界这两个边界条件的判断。会导致程序异常。考虑到这点，我们可以巧妙的利用java的异常处理机制。虽然解法并不优秀。但胜在思路奇特。\n\n```\n public static int reverse(int x) {\n        if (x<0){\n\n            String s = String.valueOf(x*(-1));\n            StringBuffer stringBuffer = new StringBuffer(s);\n            try {\n                int result = Integer.parseInt(stringBuffer.reverse().toString());\n                return result*-1;\n            }catch (Exception e){\n                return 0;\n            }\n\n        }else {\n            String s = String.valueOf(x);\n            StringBuffer stringBuffer = new StringBuffer(s);\n            try {\n                return Integer.parseInt(stringBuffer.reverse().toString());\n            }catch (Exception e){\n                return 0;\n            }\n        }\n    }\n```\n","source":"_posts/ReverseInteger解题报告.md","raw":"---\ntitle: ReverseInteger解题报告\ndate: 2016-06-25 21:44:52\ntags: [leetcode,算法,interesting] \ncategories: 算法\n\n---\n\n##### 题目概述： \nReverse digits of an integer.\n-  Example1: x = 123, return 321\n-  Example2: x = -123, return -321\n\n##### 题目解释： 逆序一个整数，其实这道题的难度，并不大，绝大多数人看到这题，都可以快速得到解题思路。但是这道题的核心是考察程序员对于边界条件的思考判断。\n\n##### 解法一：\n这是在leetcode讨论区看到的大牛的解法,一般需要考虑边界条件的解法，会有很多if判断，特殊条件之类的影响，写出的代码也是阅读性极差，而且容易丢三落四。这也是最考验代码水平的地方。\n\n<!-- more -->\n\n\n```\npublic int reverse(int x)\n{\n    int result = 0;\n\n    while (x != 0)\n    {\n        int tail = x % 10;\n        int newResult = result * 10 + tail;\n        if ((newResult - tail) / 10 != result)\n        { return 0; }\n        result = newResult;\n        x = x / 10;\n    }\n\n    return result;\n}\n```\n\n##### 解法二\n\n解题思路：题目的重点是对于末尾为0和越界这两个边界条件的判断。会导致程序异常。考虑到这点，我们可以巧妙的利用java的异常处理机制。虽然解法并不优秀。但胜在思路奇特。\n\n```\n public static int reverse(int x) {\n        if (x<0){\n\n            String s = String.valueOf(x*(-1));\n            StringBuffer stringBuffer = new StringBuffer(s);\n            try {\n                int result = Integer.parseInt(stringBuffer.reverse().toString());\n                return result*-1;\n            }catch (Exception e){\n                return 0;\n            }\n\n        }else {\n            String s = String.valueOf(x);\n            StringBuffer stringBuffer = new StringBuffer(s);\n            try {\n                return Integer.parseInt(stringBuffer.reverse().toString());\n            }catch (Exception e){\n                return 0;\n            }\n        }\n    }\n```\n","slug":"ReverseInteger解题报告","published":1,"updated":"2016-06-25T14:23:48.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy5uy37t000228rxuit6ousq","content":"<h5 id=\"题目概述：\"><a href=\"#题目概述：\" class=\"headerlink\" title=\"题目概述：\"></a>题目概述：</h5><p>Reverse digits of an integer.</p>\n<ul>\n<li>Example1: x = 123, return 321</li>\n<li>Example2: x = -123, return -321</li>\n</ul>\n<h5 id=\"题目解释：-逆序一个整数，其实这道题的难度，并不大，绝大多数人看到这题，都可以快速得到解题思路。但是这道题的核心是考察程序员对于边界条件的思考判断。\"><a href=\"#题目解释：-逆序一个整数，其实这道题的难度，并不大，绝大多数人看到这题，都可以快速得到解题思路。但是这道题的核心是考察程序员对于边界条件的思考判断。\" class=\"headerlink\" title=\"题目解释： 逆序一个整数，其实这道题的难度，并不大，绝大多数人看到这题，都可以快速得到解题思路。但是这道题的核心是考察程序员对于边界条件的思考判断。\"></a>题目解释： 逆序一个整数，其实这道题的难度，并不大，绝大多数人看到这题，都可以快速得到解题思路。但是这道题的核心是考察程序员对于边界条件的思考判断。</h5><h5 id=\"解法一：\"><a href=\"#解法一：\" class=\"headerlink\" title=\"解法一：\"></a>解法一：</h5><p>这是在leetcode讨论区看到的大牛的解法,一般需要考虑边界条件的解法，会有很多if判断，特殊条件之类的影响，写出的代码也是阅读性极差，而且容易丢三落四。这也是最考验代码水平的地方。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int reverse(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int result = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (x != 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int tail = x % 10;</span><br><span class=\"line\">        int newResult = result * 10 + tail;</span><br><span class=\"line\">        if ((newResult - tail) / 10 != result)</span><br><span class=\"line\">        &#123; return 0; &#125;</span><br><span class=\"line\">        result = newResult;</span><br><span class=\"line\">        x = x / 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h5><p>解题思路：题目的重点是对于末尾为0和越界这两个边界条件的判断。会导致程序异常。考虑到这点，我们可以巧妙的利用java的异常处理机制。虽然解法并不优秀。但胜在思路奇特。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int reverse(int x) &#123;</span><br><span class=\"line\">       if (x&lt;0)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           String s = String.valueOf(x*(-1));</span><br><span class=\"line\">           StringBuffer stringBuffer = new StringBuffer(s);</span><br><span class=\"line\">           try &#123;</span><br><span class=\"line\">               int result = Integer.parseInt(stringBuffer.reverse().toString());</span><br><span class=\"line\">               return result*-1;</span><br><span class=\"line\">           &#125;catch (Exception e)&#123;</span><br><span class=\"line\">               return 0;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;else &#123;</span><br><span class=\"line\">           String s = String.valueOf(x);</span><br><span class=\"line\">           StringBuffer stringBuffer = new StringBuffer(s);</span><br><span class=\"line\">           try &#123;</span><br><span class=\"line\">               return Integer.parseInt(stringBuffer.reverse().toString());</span><br><span class=\"line\">           &#125;catch (Exception e)&#123;</span><br><span class=\"line\">               return 0;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<h5 id=\"题目概述：\"><a href=\"#题目概述：\" class=\"headerlink\" title=\"题目概述：\"></a>题目概述：</h5><p>Reverse digits of an integer.</p>\n<ul>\n<li>Example1: x = 123, return 321</li>\n<li>Example2: x = -123, return -321</li>\n</ul>\n<h5 id=\"题目解释：-逆序一个整数，其实这道题的难度，并不大，绝大多数人看到这题，都可以快速得到解题思路。但是这道题的核心是考察程序员对于边界条件的思考判断。\"><a href=\"#题目解释：-逆序一个整数，其实这道题的难度，并不大，绝大多数人看到这题，都可以快速得到解题思路。但是这道题的核心是考察程序员对于边界条件的思考判断。\" class=\"headerlink\" title=\"题目解释： 逆序一个整数，其实这道题的难度，并不大，绝大多数人看到这题，都可以快速得到解题思路。但是这道题的核心是考察程序员对于边界条件的思考判断。\"></a>题目解释： 逆序一个整数，其实这道题的难度，并不大，绝大多数人看到这题，都可以快速得到解题思路。但是这道题的核心是考察程序员对于边界条件的思考判断。</h5><h5 id=\"解法一：\"><a href=\"#解法一：\" class=\"headerlink\" title=\"解法一：\"></a>解法一：</h5><p>这是在leetcode讨论区看到的大牛的解法,一般需要考虑边界条件的解法，会有很多if判断，特殊条件之类的影响，写出的代码也是阅读性极差，而且容易丢三落四。这也是最考验代码水平的地方。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int reverse(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int result = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (x != 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int tail = x % 10;</span><br><span class=\"line\">        int newResult = result * 10 + tail;</span><br><span class=\"line\">        if ((newResult - tail) / 10 != result)</span><br><span class=\"line\">        &#123; return 0; &#125;</span><br><span class=\"line\">        result = newResult;</span><br><span class=\"line\">        x = x / 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h5><p>解题思路：题目的重点是对于末尾为0和越界这两个边界条件的判断。会导致程序异常。考虑到这点，我们可以巧妙的利用java的异常处理机制。虽然解法并不优秀。但胜在思路奇特。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int reverse(int x) &#123;</span><br><span class=\"line\">       if (x&lt;0)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           String s = String.valueOf(x*(-1));</span><br><span class=\"line\">           StringBuffer stringBuffer = new StringBuffer(s);</span><br><span class=\"line\">           try &#123;</span><br><span class=\"line\">               int result = Integer.parseInt(stringBuffer.reverse().toString());</span><br><span class=\"line\">               return result*-1;</span><br><span class=\"line\">           &#125;catch (Exception e)&#123;</span><br><span class=\"line\">               return 0;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;else &#123;</span><br><span class=\"line\">           String s = String.valueOf(x);</span><br><span class=\"line\">           StringBuffer stringBuffer = new StringBuffer(s);</span><br><span class=\"line\">           try &#123;</span><br><span class=\"line\">               return Integer.parseInt(stringBuffer.reverse().toString());</span><br><span class=\"line\">           &#125;catch (Exception e)&#123;</span><br><span class=\"line\">               return 0;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>"},{"title":"java PermGen 去哪了","date":"2016-05-14T07:42:45.000Z","_content":"### Java PermGen 去哪里了?\n\n[原文链接](http://www.infoq.com/articles/Java-PERMGEN-Removed)：原文作者：Monica Beckwith  以下为本人翻译，仅用于交流学习，版权归原作者和InfoQ所有，转载注明出处，请不要用于商业用途\n\n在Java虚拟机(JVM)内部，class文件中包括类的版本、字段、方法、接口等描述信息，还有运行时常量池，用于存放编译器生成的各种字面量和符号引用。\n\n在过去（自定义类加载器还不是很常见的时候），类大多是”static”的，很少被卸载或收集，因此被称为“永久的(Permanent)”。同时，由于类class是JVM实现的一部分，并不是由应用创建的，所以又被认为是“非堆(non-heap)”内存。\n\n<!-- more -->\n在JDK8之前的HotSpot JVM，存放这些”永久的”的区域叫做“永久代(permanent generation)”。永久代是一片连续的堆空间，在JVM启动之前通过在命令行设置参数-XX:MaxPermSize来设定永久代最大可分配的内存空间，默认大小是64M（64位JVM由于指针膨胀，默认是85M）。永久代的垃圾收集是和老年代(old generation)捆绑在一起的，因此无论谁满了，都会触发永久代和老年代的垃圾收集。不过，一个明显的问题是，当JVM加载的类信息容量超过了参数-XX：MaxPermSize设定的值时，应用将会报OOM的错误(对于这句话，译者的理解是：32位的JVM默认MaxPermSize是64M，而JDK8里的Metaspace，也可以通过参数-XX:MetaspaceSize 和-XX:MaxMetaspaceSize设定大小，但如果不指定MaxMetaspaceSize的话，Metaspace的大小仅受限于native memory的剩余大小。也就是说永久代的最大空间一定得有个指定值，而如果MaxPermSize指定不当，就会OOM)。\n\n注：在JDK7之前的版本，对于HopSpot JVM，interned-strings存储在永久代（又名PermGen），会导致大量的性能问题和OOM错误。从PermGen移除interned strings的更多信息查看[这里](http://bugs.java.com/view_bug.do?bug_id=6962931)。\n\n译者注：从JDK7开始永久代的移除工作，贮存在永久代的一部分数据已经转移到了Java Heap或者是Native Heap。但永久代仍然存在于JDK7，并没有完全的移除：符号引用(Symbols)转移到了native heap;字面量(interned strings)转移到了java heap;类的静态变量(class statics)转移到了java heap。\n\n在JDK7 update 4即随后的版本中，提供了完整的支持对于Garbage-First(G1)垃圾收集器，以取代在JDK5中发布的CMS收集器。使用G1，PermGen仅仅在FullGC（stop-the-word,STW）时才会被收集。G1仅仅在PermGen满了或者应用分配内存的速度比G1并发垃圾收集速度快的时候才触发FullGC。\n\n而对于CMS收集器，通过开启布尔参数-XX:+CMSClassUnloadingEnabled来并发对PermGen进行收集。对于G1没有类似的选项，G1只能通过FullGC，stop the world,来对PermGen进行收集。\n\n永久代在JDK8中被完全的移除了。所以永久代的参数-XX:PermSize和-XX：MaxPermSize也被移除了。\n\n在JDK8中,classe metadata(the virtual machines internal presentation of Java class),被存储在叫做Metaspace的native memory。一些新的flags被加入：\n-XX:MetaspaceSize，class metadata的初始空间配额，以bytes为单位，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当的降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize（如果设置了的话），适当的提高该值。\n-XX：MaxMetaspaceSize，可以为class metadata分配的最大空间。默认是没有限制的。\n-XX：MinMetaspaceFreeRatio,在GC之后，最小的Metaspace剩余空间容量的百分比，减少为class metadata分配空间导致的垃圾收集\n-XX:MaxMetaspaceFreeRatio,在GC之后，最大的Metaspace剩余空间容量的百分比，减少为class metadata释放空间导致的垃圾收集\n\n默认情况下，class metadata的分配仅受限于可用的native memory总量。可以使用MaxMetaspaceSize来限制可为class metadata分配的最大内存。当class metadata的使用的内存达到MetaspaceSize(32位clientVM默认12Mbytes,32位ServerVM默认是16Mbytes)时就会对死亡的类加载器和类进行垃圾收集。设置MetaspaceSize为一个较高的值可以推迟垃圾收集的发生。\n\nNative Heap，就是C-Heap。对于32位的JVM，C-Heap的容量=4G-Java Heap-PermGen；对于64位的JVM，C-Heap的容量=物理服务器的总RAM+虚拟内存-Java Heap-PermGen\n\n这里科普下，在Windows下称为虚拟内存(virtual memory),在Linux下称为交换空间(swap space),用于当系统需要更多的内存资源而物理内存已经满了的情况下，将物理内存中不活跃的页转移到磁盘上的交换空间中。\n\n在JDK8，Native Memory，包括Metaspace和C-Heap。\n\nIBM的J9和Oracle的JRockit(收购BEA公司的JVM)都没有永久代的概念，而Oracle移除HotSpot中的永久代的原因之一是为了与JRockit合并，以充分利用各自的特点。\n\n### <a name=\"t1\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>再见，再见PermGen，你好Metaspace\n\n随着JDK8的到来，JVM不再有PermGen。但类的元数据信息（metadata）还在，只不过不再是存储在连续的堆空间上，而是移动到叫做“Metaspace”的本地内存（Native memory）中。\n\n类的元数据信息转移到Metaspace的原因是PermGen很难调整。PermGen中类的元数据信息在每次FullGC的时候可能会被收集，但成绩很难令人满意。而且应该为PermGen分配多大的空间很难确定，因为PermSize的大小依赖于很多因素，比如JVM加载的class的总数，常量池的大小，方法的大小等。\n\n此外，在HotSpot中的每个垃圾收集器需要专门的代码来处理存储在PermGen中的类的元数据信息。从PermGen分离类的元数据信息到Metaspace,由于Metaspace的分配具有和Java Heap相同的地址空间，因此Metaspace和Java Heap可以无缝的管理，而且简化了FullGC的过程，以至将来可以并行的对元数据信息进行垃圾收集，而没有GC暂停。\n![](http://i.imgur.com/WS0hb1g.jpg)\n\n### <a name=\"t2\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>永久代的移除对最终用户意味着什么？\n\n由于类的元数据可以在本地内存(native memory)之外分配,所以其最大可利用空间是整个系统内存的可用空间。这样，你将不再会遇到OOM错误，溢出的内存会涌入到交换空间。最终用户可以为类元数据指定最大可利用的本地内存空间，JVM也可以增加本地内存空间来满足类元数据信息的存储。\n\n注：永久代的移除并不意味者类加载器泄露的问题就没有了。因此，你仍然需要监控你的消费和计划，因为内存泄露会耗尽整个本地内存，导致内存交换(swapping)，这样只会变得更糟。\n\n### <a name=\"t3\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>移动到Metaspace和它的内存分配\n\nMetaspace VM利用内存管理技术来管理Metaspace。这使得由不同的垃圾收集器来处理类元数据的工作，现在仅仅由Metaspace VM在Metaspace中通过C++来进行管理。Metaspace背后的一个思想是，类和它的元数据的生命周期是和它的类加载器的生命周期一致的。也就是说，只要类的类加载器是存活的，在Metaspace中的类元数据也是存活的，不能被释放。\n\n之前我们不严格的使用这个术语“Metaspace”。更正式的，每个类加载器存储区叫做“a metaspace”。这些metaspaces一起总体称为”the Metaspace”。仅仅当类加载器不在存活，被垃圾收集器声明死亡后，该类加载器对应的metaspace空间才可以回收。Metaspace空间没有迁移和压缩。但是元数据会被扫描是否存在Java引用。\n\nMetaspace VM使用一个块分配器(chunking allocator)来管理Metaspace空间的内存分配。块的大小依赖于类加载器的类型。其中有一个全局的可使用的块列表（a global free list of chunks）。当类加载器需要一个块的时候，类加载器从全局块列表中取出一个块，添加到它自己维护的块列表中。当类加载器死亡，它的块将会被释放，归还给全局的块列表。块（chunk）会进一步被划分成blocks,每个block存储一个元数据单元(a unit of metadata)。Chunk中Blocks的分配线性的（pointer bump）。这些chunks被分配在内存映射空间(memory mapped(mmapped) spaces)之外。在一个全局的虚拟内存映射空间（global virtual mmapped spaces）的链表，当任何虚拟空间变为空时，就将该虚拟空间归还回操作系统。\n![](http://i.imgur.com/JFH75Lz.jpg)\n\n上面这幅图展示了Metaspace使用metachunks在mmapeded virual spaces分配的情形。类加载器1和3描述的是反射或匿名类加载器，使用“特定的”chunk尺寸。类加载器2和4使用小还是中等的chunk尺寸取决于加载的类数量。\n\n### <a name=\"t4\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>Metaspace大小的调整和可以使用的工具\n\n正如前面提到了，Metaspace VM管理Metaspace空间的增长。但有时你会想通过在命令行显示的设置参数-XX:MaxMetaspaceSize来限制Metaspace空间的增长。默认情况下，-XX:MaxMetaspaceSize并没有限制，因此，在技术上，Metaspace的尺寸可以增长到交换空间，而你的本地内存分配将会失败。\n\n对于64位的服务器端JVM，-XX：MetaspaceSize的默认大小是21M。这是初始的限制值(the initial high watermark)。一旦达到这个限制值，FullGC将会被触发进行类卸载(当这些类的类加载器不再存活时)，然后这个high watermark被重置。新的high watermark的值依赖于空余Metaspace的容量。如果没有足够的空间被释放，high watermark的值将会上升；如果释放了大量的空间，那么high watermark的值将会下降。如果初始的watermark设置的太低，这个过程将会进行多次。你可以通过垃圾收集日志来显示的查看这个垃圾收集的过程。所以，一般建议在命令行设置一个较大的值给XX:MetaspaceSize来避免初始时的垃圾收集。\n\n每次垃圾收集之后，Metaspace VM会自动的调整high watermark，推迟下一次对Metaspace的垃圾收集。\n\n这两个参数，-XX：MinMetaspaceFreeRatio和-XX：MaxMetaspaceFreeRatio,类似于GC的FreeRatio参数，可以放在命令行。\n\n针对Metaspace，JDK自带的一些工具做了修改来展示Metaspace的信息：\n\n*   **jmap -clstats **:打印类加载器的统计信息(取代了在JDK8之前打印类加载器信息的permstat)。一个例子的输出当运行DaCapo’s Avrora基准测试：\n\n```\n$ jmap -clstats \nAttaching to process ID 6476, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.5-b02\nfinding class loader instances ..done.\ncomputing per loader stat ..done.\nplease wait.. computing liveness.liveness analysis may be inaccurate ...\nclass_loader classes bytes parent_loader alive? type \n<bootstrap\\> 655 1222734 null live <internal> \n0x000000074004a6c0000x000000074004a708dead java/util/ResourceBundle$RBClassLoader@0x00000007c0053e20\n0x000000074004a76000 null dead sun/misc/Launcher$ExtClassLoader@0x00000007c002d248 0x00000007401189c8 1 1471\n0x00000007400752f8dead sun/reflect/DelegatingClassLoader@0x00000007c0009870 0x000000074004a708116 3160530x000000074004a760 dead sun/misc/Launcher$AppClassLoader@0x00000007c0038190 \n0x00000007400752f8538 7738540x000000074004a708 dead org/dacapo/harness/DacapoClassLoader@0x00000007c00638b0 \ntotal = 6 1310 2314112 N/A alive=1, dead=5 N/A\n```\n\n*   **jstat -gc **:Metaspace的信息也会被打印出来，如下面的例子所示：\n    ![](http://i.imgur.com/oEE3iA5.jpg)\n*   **jcmd GC.class_stats**:这是一个新的诊断命令，可以使用户连接到存活的JVM，转储Java类元数据的详细统计。\n\n注：在JDK8 build 13下，需要开启参数-XX：+UnlockDiagnosticVMOptions\n\n```\n$ jcmd  help GC.class_stats\n9522:\nGC.class_stats \nProvide statistics about Java class meta data. Requires -XX:+UnlockDiagnosticVMOptions. \nImpact: High: Depends on Java heap size and content. \nSyntax : GC.class_stats [options] [<columns>] \nArguments: \n  columns : [optional] Comma-separated list of all the columns to show. If not specified, the following columns are shown: InstBytes,KlassBytes,CpAll,annotations,MethodCount,Bytecodes,MethodAll,ROAll,RWAll,Total (STRING, no default value) \nOptions: (options must be specified using the <key> or <key>=<value> syntax) \n  -all : [optional] Show all columns (BOOLEAN, false) \n  -csv : [optional] Print in CSV (comma-separated values) format for spreadsheets (BOOLEAN, false) \n  -help : [optional] Show meaning of all the columns (BOOLEAN, false\n```\n\n注：对于列的更多信息，请查看[这里](https://bugs.openjdk.java.net/secure/attachment/11600/ver_010_help.txt)。\n一个输出列子：\n\n```\n$ jcmd  GC.class_stats \n7140:\nIndex Super InstBytes KlassBytes annotations CpAll MethodCount Bytecodes MethodAll ROAll RWAll Total ClassName \n1 -1 426416 480 0 0 0 0 0 24 576 600 [C \n2 -1 290136 480 0 0 0 0 0 40 576 616 [Lavrora.arch.legacy.LegacyInstr; \n3 -1 269840 480 0 0 0 0 0 24 576 600 [B \n4 43 137856 648 0 19248 129 4886 25288 16368 30568 46936 java.lang.Class \n5 43 136968 624 0 8760 94 4570 33616 12072 32000 44072 java.lang.String \n6 43 75872 560 0 1296 7 149 1400 880 2680 3560 java.util.HashMap$Node \n7 836 57408 608 0 720 3 69 1480 528 2488 3016 avrora.sim.util.MulticastFSMProbe \n8 43 55488 504 0 680 1 31 440 280 1536 1816 avrora.sim.FiniteStateMachine$State \n9 -1 53712 480 0 0 0 0 0 24 576 600 [Ljava.lang.Object; \n10 -1 49424 480 0 0 0 0 0 24 576 600 [I \n11 -1 49248 480 0 0 0 0 0 24 576 600 [Lavrora.sim.platform.ExternalFlash$Page; \n12 -1 24400 480 0 0 0 0 0 32 576 608 [Ljava.util.HashMap$Node; \n13 394 21408 520 0 600 3 33 1216 432 2080 2512 avrora.sim.AtmelInterpreter$IORegBehavior \n14 727 19800 672 0 968 4 71 1240 664 2472 3136 avrora.arch.legacy.LegacyInstr$MOVW \n…<snipped> \n…<snipped> \n1299 1300 0 608 0 256 1 5 152 104 1024 1128 sun.util.resources.LocaleNamesBundle \n1300 1098 0 608 0 1744 10 290 1808 1176 3208 4384 sun.util.resources.OpenListResourceBundle \n1301 1098 0 616 0 2184 12 395 2200 1480 3800 5280 sun.util.resources.ParallelListResourceBundle \n 2244312 794288 2024 2260976 12801 561882 3135144 1906688 4684704 6591392 Total \n 34.0% 12.1% 0.0% 34.3% - 8.5% 47.6% 28.9% 71.1% 100.0% \nIndex Super InstBytes KlassBytes annotations CpAll MethodCount Bytecodes MethodAll ROAll RWAll Total ClassName\n\n```\n### 当前的问题\n\n先前提到的，Metaspace VM使用块分配器(chunking allocator)。chunk的大小取决于类加载器的类型。由于类class并没有一个固定的尺寸，这就存在这样一种可能：可分配的chunk的尺寸和需要的chunk的尺寸不相等，这就会导致内存碎片。Metaspace VM还没有使用压缩技术，所以内存碎片是现在的一个主要关注的问题。\n![](http://i.imgur.com/5424Rjo.jpg)\n\n[原文地址](http://ifeve.com/java-permgen-removed/)\n\n\n\n\n","source":"_posts/java-PermGen-去哪了.md","raw":"---\ntitle: java PermGen 去哪了\ndate: 2016-05-14 15:42:45\ncategories:\n- jvm\n\ntags: [java,jvm]\n\n\n---\n### Java PermGen 去哪里了?\n\n[原文链接](http://www.infoq.com/articles/Java-PERMGEN-Removed)：原文作者：Monica Beckwith  以下为本人翻译，仅用于交流学习，版权归原作者和InfoQ所有，转载注明出处，请不要用于商业用途\n\n在Java虚拟机(JVM)内部，class文件中包括类的版本、字段、方法、接口等描述信息，还有运行时常量池，用于存放编译器生成的各种字面量和符号引用。\n\n在过去（自定义类加载器还不是很常见的时候），类大多是”static”的，很少被卸载或收集，因此被称为“永久的(Permanent)”。同时，由于类class是JVM实现的一部分，并不是由应用创建的，所以又被认为是“非堆(non-heap)”内存。\n\n<!-- more -->\n在JDK8之前的HotSpot JVM，存放这些”永久的”的区域叫做“永久代(permanent generation)”。永久代是一片连续的堆空间，在JVM启动之前通过在命令行设置参数-XX:MaxPermSize来设定永久代最大可分配的内存空间，默认大小是64M（64位JVM由于指针膨胀，默认是85M）。永久代的垃圾收集是和老年代(old generation)捆绑在一起的，因此无论谁满了，都会触发永久代和老年代的垃圾收集。不过，一个明显的问题是，当JVM加载的类信息容量超过了参数-XX：MaxPermSize设定的值时，应用将会报OOM的错误(对于这句话，译者的理解是：32位的JVM默认MaxPermSize是64M，而JDK8里的Metaspace，也可以通过参数-XX:MetaspaceSize 和-XX:MaxMetaspaceSize设定大小，但如果不指定MaxMetaspaceSize的话，Metaspace的大小仅受限于native memory的剩余大小。也就是说永久代的最大空间一定得有个指定值，而如果MaxPermSize指定不当，就会OOM)。\n\n注：在JDK7之前的版本，对于HopSpot JVM，interned-strings存储在永久代（又名PermGen），会导致大量的性能问题和OOM错误。从PermGen移除interned strings的更多信息查看[这里](http://bugs.java.com/view_bug.do?bug_id=6962931)。\n\n译者注：从JDK7开始永久代的移除工作，贮存在永久代的一部分数据已经转移到了Java Heap或者是Native Heap。但永久代仍然存在于JDK7，并没有完全的移除：符号引用(Symbols)转移到了native heap;字面量(interned strings)转移到了java heap;类的静态变量(class statics)转移到了java heap。\n\n在JDK7 update 4即随后的版本中，提供了完整的支持对于Garbage-First(G1)垃圾收集器，以取代在JDK5中发布的CMS收集器。使用G1，PermGen仅仅在FullGC（stop-the-word,STW）时才会被收集。G1仅仅在PermGen满了或者应用分配内存的速度比G1并发垃圾收集速度快的时候才触发FullGC。\n\n而对于CMS收集器，通过开启布尔参数-XX:+CMSClassUnloadingEnabled来并发对PermGen进行收集。对于G1没有类似的选项，G1只能通过FullGC，stop the world,来对PermGen进行收集。\n\n永久代在JDK8中被完全的移除了。所以永久代的参数-XX:PermSize和-XX：MaxPermSize也被移除了。\n\n在JDK8中,classe metadata(the virtual machines internal presentation of Java class),被存储在叫做Metaspace的native memory。一些新的flags被加入：\n-XX:MetaspaceSize，class metadata的初始空间配额，以bytes为单位，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当的降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize（如果设置了的话），适当的提高该值。\n-XX：MaxMetaspaceSize，可以为class metadata分配的最大空间。默认是没有限制的。\n-XX：MinMetaspaceFreeRatio,在GC之后，最小的Metaspace剩余空间容量的百分比，减少为class metadata分配空间导致的垃圾收集\n-XX:MaxMetaspaceFreeRatio,在GC之后，最大的Metaspace剩余空间容量的百分比，减少为class metadata释放空间导致的垃圾收集\n\n默认情况下，class metadata的分配仅受限于可用的native memory总量。可以使用MaxMetaspaceSize来限制可为class metadata分配的最大内存。当class metadata的使用的内存达到MetaspaceSize(32位clientVM默认12Mbytes,32位ServerVM默认是16Mbytes)时就会对死亡的类加载器和类进行垃圾收集。设置MetaspaceSize为一个较高的值可以推迟垃圾收集的发生。\n\nNative Heap，就是C-Heap。对于32位的JVM，C-Heap的容量=4G-Java Heap-PermGen；对于64位的JVM，C-Heap的容量=物理服务器的总RAM+虚拟内存-Java Heap-PermGen\n\n这里科普下，在Windows下称为虚拟内存(virtual memory),在Linux下称为交换空间(swap space),用于当系统需要更多的内存资源而物理内存已经满了的情况下，将物理内存中不活跃的页转移到磁盘上的交换空间中。\n\n在JDK8，Native Memory，包括Metaspace和C-Heap。\n\nIBM的J9和Oracle的JRockit(收购BEA公司的JVM)都没有永久代的概念，而Oracle移除HotSpot中的永久代的原因之一是为了与JRockit合并，以充分利用各自的特点。\n\n### <a name=\"t1\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>再见，再见PermGen，你好Metaspace\n\n随着JDK8的到来，JVM不再有PermGen。但类的元数据信息（metadata）还在，只不过不再是存储在连续的堆空间上，而是移动到叫做“Metaspace”的本地内存（Native memory）中。\n\n类的元数据信息转移到Metaspace的原因是PermGen很难调整。PermGen中类的元数据信息在每次FullGC的时候可能会被收集，但成绩很难令人满意。而且应该为PermGen分配多大的空间很难确定，因为PermSize的大小依赖于很多因素，比如JVM加载的class的总数，常量池的大小，方法的大小等。\n\n此外，在HotSpot中的每个垃圾收集器需要专门的代码来处理存储在PermGen中的类的元数据信息。从PermGen分离类的元数据信息到Metaspace,由于Metaspace的分配具有和Java Heap相同的地址空间，因此Metaspace和Java Heap可以无缝的管理，而且简化了FullGC的过程，以至将来可以并行的对元数据信息进行垃圾收集，而没有GC暂停。\n![](http://i.imgur.com/WS0hb1g.jpg)\n\n### <a name=\"t2\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>永久代的移除对最终用户意味着什么？\n\n由于类的元数据可以在本地内存(native memory)之外分配,所以其最大可利用空间是整个系统内存的可用空间。这样，你将不再会遇到OOM错误，溢出的内存会涌入到交换空间。最终用户可以为类元数据指定最大可利用的本地内存空间，JVM也可以增加本地内存空间来满足类元数据信息的存储。\n\n注：永久代的移除并不意味者类加载器泄露的问题就没有了。因此，你仍然需要监控你的消费和计划，因为内存泄露会耗尽整个本地内存，导致内存交换(swapping)，这样只会变得更糟。\n\n### <a name=\"t3\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>移动到Metaspace和它的内存分配\n\nMetaspace VM利用内存管理技术来管理Metaspace。这使得由不同的垃圾收集器来处理类元数据的工作，现在仅仅由Metaspace VM在Metaspace中通过C++来进行管理。Metaspace背后的一个思想是，类和它的元数据的生命周期是和它的类加载器的生命周期一致的。也就是说，只要类的类加载器是存活的，在Metaspace中的类元数据也是存活的，不能被释放。\n\n之前我们不严格的使用这个术语“Metaspace”。更正式的，每个类加载器存储区叫做“a metaspace”。这些metaspaces一起总体称为”the Metaspace”。仅仅当类加载器不在存活，被垃圾收集器声明死亡后，该类加载器对应的metaspace空间才可以回收。Metaspace空间没有迁移和压缩。但是元数据会被扫描是否存在Java引用。\n\nMetaspace VM使用一个块分配器(chunking allocator)来管理Metaspace空间的内存分配。块的大小依赖于类加载器的类型。其中有一个全局的可使用的块列表（a global free list of chunks）。当类加载器需要一个块的时候，类加载器从全局块列表中取出一个块，添加到它自己维护的块列表中。当类加载器死亡，它的块将会被释放，归还给全局的块列表。块（chunk）会进一步被划分成blocks,每个block存储一个元数据单元(a unit of metadata)。Chunk中Blocks的分配线性的（pointer bump）。这些chunks被分配在内存映射空间(memory mapped(mmapped) spaces)之外。在一个全局的虚拟内存映射空间（global virtual mmapped spaces）的链表，当任何虚拟空间变为空时，就将该虚拟空间归还回操作系统。\n![](http://i.imgur.com/JFH75Lz.jpg)\n\n上面这幅图展示了Metaspace使用metachunks在mmapeded virual spaces分配的情形。类加载器1和3描述的是反射或匿名类加载器，使用“特定的”chunk尺寸。类加载器2和4使用小还是中等的chunk尺寸取决于加载的类数量。\n\n### <a name=\"t4\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>Metaspace大小的调整和可以使用的工具\n\n正如前面提到了，Metaspace VM管理Metaspace空间的增长。但有时你会想通过在命令行显示的设置参数-XX:MaxMetaspaceSize来限制Metaspace空间的增长。默认情况下，-XX:MaxMetaspaceSize并没有限制，因此，在技术上，Metaspace的尺寸可以增长到交换空间，而你的本地内存分配将会失败。\n\n对于64位的服务器端JVM，-XX：MetaspaceSize的默认大小是21M。这是初始的限制值(the initial high watermark)。一旦达到这个限制值，FullGC将会被触发进行类卸载(当这些类的类加载器不再存活时)，然后这个high watermark被重置。新的high watermark的值依赖于空余Metaspace的容量。如果没有足够的空间被释放，high watermark的值将会上升；如果释放了大量的空间，那么high watermark的值将会下降。如果初始的watermark设置的太低，这个过程将会进行多次。你可以通过垃圾收集日志来显示的查看这个垃圾收集的过程。所以，一般建议在命令行设置一个较大的值给XX:MetaspaceSize来避免初始时的垃圾收集。\n\n每次垃圾收集之后，Metaspace VM会自动的调整high watermark，推迟下一次对Metaspace的垃圾收集。\n\n这两个参数，-XX：MinMetaspaceFreeRatio和-XX：MaxMetaspaceFreeRatio,类似于GC的FreeRatio参数，可以放在命令行。\n\n针对Metaspace，JDK自带的一些工具做了修改来展示Metaspace的信息：\n\n*   **jmap -clstats **:打印类加载器的统计信息(取代了在JDK8之前打印类加载器信息的permstat)。一个例子的输出当运行DaCapo’s Avrora基准测试：\n\n```\n$ jmap -clstats \nAttaching to process ID 6476, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.5-b02\nfinding class loader instances ..done.\ncomputing per loader stat ..done.\nplease wait.. computing liveness.liveness analysis may be inaccurate ...\nclass_loader classes bytes parent_loader alive? type \n<bootstrap\\> 655 1222734 null live <internal> \n0x000000074004a6c0000x000000074004a708dead java/util/ResourceBundle$RBClassLoader@0x00000007c0053e20\n0x000000074004a76000 null dead sun/misc/Launcher$ExtClassLoader@0x00000007c002d248 0x00000007401189c8 1 1471\n0x00000007400752f8dead sun/reflect/DelegatingClassLoader@0x00000007c0009870 0x000000074004a708116 3160530x000000074004a760 dead sun/misc/Launcher$AppClassLoader@0x00000007c0038190 \n0x00000007400752f8538 7738540x000000074004a708 dead org/dacapo/harness/DacapoClassLoader@0x00000007c00638b0 \ntotal = 6 1310 2314112 N/A alive=1, dead=5 N/A\n```\n\n*   **jstat -gc **:Metaspace的信息也会被打印出来，如下面的例子所示：\n    ![](http://i.imgur.com/oEE3iA5.jpg)\n*   **jcmd GC.class_stats**:这是一个新的诊断命令，可以使用户连接到存活的JVM，转储Java类元数据的详细统计。\n\n注：在JDK8 build 13下，需要开启参数-XX：+UnlockDiagnosticVMOptions\n\n```\n$ jcmd  help GC.class_stats\n9522:\nGC.class_stats \nProvide statistics about Java class meta data. Requires -XX:+UnlockDiagnosticVMOptions. \nImpact: High: Depends on Java heap size and content. \nSyntax : GC.class_stats [options] [<columns>] \nArguments: \n  columns : [optional] Comma-separated list of all the columns to show. If not specified, the following columns are shown: InstBytes,KlassBytes,CpAll,annotations,MethodCount,Bytecodes,MethodAll,ROAll,RWAll,Total (STRING, no default value) \nOptions: (options must be specified using the <key> or <key>=<value> syntax) \n  -all : [optional] Show all columns (BOOLEAN, false) \n  -csv : [optional] Print in CSV (comma-separated values) format for spreadsheets (BOOLEAN, false) \n  -help : [optional] Show meaning of all the columns (BOOLEAN, false\n```\n\n注：对于列的更多信息，请查看[这里](https://bugs.openjdk.java.net/secure/attachment/11600/ver_010_help.txt)。\n一个输出列子：\n\n```\n$ jcmd  GC.class_stats \n7140:\nIndex Super InstBytes KlassBytes annotations CpAll MethodCount Bytecodes MethodAll ROAll RWAll Total ClassName \n1 -1 426416 480 0 0 0 0 0 24 576 600 [C \n2 -1 290136 480 0 0 0 0 0 40 576 616 [Lavrora.arch.legacy.LegacyInstr; \n3 -1 269840 480 0 0 0 0 0 24 576 600 [B \n4 43 137856 648 0 19248 129 4886 25288 16368 30568 46936 java.lang.Class \n5 43 136968 624 0 8760 94 4570 33616 12072 32000 44072 java.lang.String \n6 43 75872 560 0 1296 7 149 1400 880 2680 3560 java.util.HashMap$Node \n7 836 57408 608 0 720 3 69 1480 528 2488 3016 avrora.sim.util.MulticastFSMProbe \n8 43 55488 504 0 680 1 31 440 280 1536 1816 avrora.sim.FiniteStateMachine$State \n9 -1 53712 480 0 0 0 0 0 24 576 600 [Ljava.lang.Object; \n10 -1 49424 480 0 0 0 0 0 24 576 600 [I \n11 -1 49248 480 0 0 0 0 0 24 576 600 [Lavrora.sim.platform.ExternalFlash$Page; \n12 -1 24400 480 0 0 0 0 0 32 576 608 [Ljava.util.HashMap$Node; \n13 394 21408 520 0 600 3 33 1216 432 2080 2512 avrora.sim.AtmelInterpreter$IORegBehavior \n14 727 19800 672 0 968 4 71 1240 664 2472 3136 avrora.arch.legacy.LegacyInstr$MOVW \n…<snipped> \n…<snipped> \n1299 1300 0 608 0 256 1 5 152 104 1024 1128 sun.util.resources.LocaleNamesBundle \n1300 1098 0 608 0 1744 10 290 1808 1176 3208 4384 sun.util.resources.OpenListResourceBundle \n1301 1098 0 616 0 2184 12 395 2200 1480 3800 5280 sun.util.resources.ParallelListResourceBundle \n 2244312 794288 2024 2260976 12801 561882 3135144 1906688 4684704 6591392 Total \n 34.0% 12.1% 0.0% 34.3% - 8.5% 47.6% 28.9% 71.1% 100.0% \nIndex Super InstBytes KlassBytes annotations CpAll MethodCount Bytecodes MethodAll ROAll RWAll Total ClassName\n\n```\n### 当前的问题\n\n先前提到的，Metaspace VM使用块分配器(chunking allocator)。chunk的大小取决于类加载器的类型。由于类class并没有一个固定的尺寸，这就存在这样一种可能：可分配的chunk的尺寸和需要的chunk的尺寸不相等，这就会导致内存碎片。Metaspace VM还没有使用压缩技术，所以内存碎片是现在的一个主要关注的问题。\n![](http://i.imgur.com/5424Rjo.jpg)\n\n[原文地址](http://ifeve.com/java-permgen-removed/)\n\n\n\n\n","slug":"java-PermGen-去哪了","published":1,"updated":"2016-05-14T08:08:55.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy5uy393000628rxr1eob2zd","content":"<h3 id=\"Java-PermGen-去哪里了\"><a href=\"#Java-PermGen-去哪里了\" class=\"headerlink\" title=\"Java PermGen 去哪里了?\"></a>Java PermGen 去哪里了?</h3><p><a href=\"http://www.infoq.com/articles/Java-PERMGEN-Removed\" target=\"_blank\" rel=\"external\">原文链接</a>：原文作者：Monica Beckwith  以下为本人翻译，仅用于交流学习，版权归原作者和InfoQ所有，转载注明出处，请不要用于商业用途</p>\n<p>在Java虚拟机(JVM)内部，class文件中包括类的版本、字段、方法、接口等描述信息，还有运行时常量池，用于存放编译器生成的各种字面量和符号引用。</p>\n<p>在过去（自定义类加载器还不是很常见的时候），类大多是”static”的，很少被卸载或收集，因此被称为“永久的(Permanent)”。同时，由于类class是JVM实现的一部分，并不是由应用创建的，所以又被认为是“非堆(non-heap)”内存。</p>\n<a id=\"more\"></a>\n<p>在JDK8之前的HotSpot JVM，存放这些”永久的”的区域叫做“永久代(permanent generation)”。永久代是一片连续的堆空间，在JVM启动之前通过在命令行设置参数-XX:MaxPermSize来设定永久代最大可分配的内存空间，默认大小是64M（64位JVM由于指针膨胀，默认是85M）。永久代的垃圾收集是和老年代(old generation)捆绑在一起的，因此无论谁满了，都会触发永久代和老年代的垃圾收集。不过，一个明显的问题是，当JVM加载的类信息容量超过了参数-XX：MaxPermSize设定的值时，应用将会报OOM的错误(对于这句话，译者的理解是：32位的JVM默认MaxPermSize是64M，而JDK8里的Metaspace，也可以通过参数-XX:MetaspaceSize 和-XX:MaxMetaspaceSize设定大小，但如果不指定MaxMetaspaceSize的话，Metaspace的大小仅受限于native memory的剩余大小。也就是说永久代的最大空间一定得有个指定值，而如果MaxPermSize指定不当，就会OOM)。</p>\n<p>注：在JDK7之前的版本，对于HopSpot JVM，interned-strings存储在永久代（又名PermGen），会导致大量的性能问题和OOM错误。从PermGen移除interned strings的更多信息查看<a href=\"http://bugs.java.com/view_bug.do?bug_id=6962931\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p>译者注：从JDK7开始永久代的移除工作，贮存在永久代的一部分数据已经转移到了Java Heap或者是Native Heap。但永久代仍然存在于JDK7，并没有完全的移除：符号引用(Symbols)转移到了native heap;字面量(interned strings)转移到了java heap;类的静态变量(class statics)转移到了java heap。</p>\n<p>在JDK7 update 4即随后的版本中，提供了完整的支持对于Garbage-First(G1)垃圾收集器，以取代在JDK5中发布的CMS收集器。使用G1，PermGen仅仅在FullGC（stop-the-word,STW）时才会被收集。G1仅仅在PermGen满了或者应用分配内存的速度比G1并发垃圾收集速度快的时候才触发FullGC。</p>\n<p>而对于CMS收集器，通过开启布尔参数-XX:+CMSClassUnloadingEnabled来并发对PermGen进行收集。对于G1没有类似的选项，G1只能通过FullGC，stop the world,来对PermGen进行收集。</p>\n<p>永久代在JDK8中被完全的移除了。所以永久代的参数-XX:PermSize和-XX：MaxPermSize也被移除了。</p>\n<p>在JDK8中,classe metadata(the virtual machines internal presentation of Java class),被存储在叫做Metaspace的native memory。一些新的flags被加入：<br>-XX:MetaspaceSize，class metadata的初始空间配额，以bytes为单位，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当的降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize（如果设置了的话），适当的提高该值。<br>-XX：MaxMetaspaceSize，可以为class metadata分配的最大空间。默认是没有限制的。<br>-XX：MinMetaspaceFreeRatio,在GC之后，最小的Metaspace剩余空间容量的百分比，减少为class metadata分配空间导致的垃圾收集<br>-XX:MaxMetaspaceFreeRatio,在GC之后，最大的Metaspace剩余空间容量的百分比，减少为class metadata释放空间导致的垃圾收集</p>\n<p>默认情况下，class metadata的分配仅受限于可用的native memory总量。可以使用MaxMetaspaceSize来限制可为class metadata分配的最大内存。当class metadata的使用的内存达到MetaspaceSize(32位clientVM默认12Mbytes,32位ServerVM默认是16Mbytes)时就会对死亡的类加载器和类进行垃圾收集。设置MetaspaceSize为一个较高的值可以推迟垃圾收集的发生。</p>\n<p>Native Heap，就是C-Heap。对于32位的JVM，C-Heap的容量=4G-Java Heap-PermGen；对于64位的JVM，C-Heap的容量=物理服务器的总RAM+虚拟内存-Java Heap-PermGen</p>\n<p>这里科普下，在Windows下称为虚拟内存(virtual memory),在Linux下称为交换空间(swap space),用于当系统需要更多的内存资源而物理内存已经满了的情况下，将物理内存中不活跃的页转移到磁盘上的交换空间中。</p>\n<p>在JDK8，Native Memory，包括Metaspace和C-Heap。</p>\n<p>IBM的J9和Oracle的JRockit(收购BEA公司的JVM)都没有永久代的概念，而Oracle移除HotSpot中的永久代的原因之一是为了与JRockit合并，以充分利用各自的特点。</p>\n<h3 id=\"再见，再见PermGen，你好Metaspace\"><a href=\"#再见，再见PermGen，你好Metaspace\" class=\"headerlink\" title=\"再见，再见PermGen，你好Metaspace\"></a><a name=\"t1\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>再见，再见PermGen，你好Metaspace</h3><p>随着JDK8的到来，JVM不再有PermGen。但类的元数据信息（metadata）还在，只不过不再是存储在连续的堆空间上，而是移动到叫做“Metaspace”的本地内存（Native memory）中。</p>\n<p>类的元数据信息转移到Metaspace的原因是PermGen很难调整。PermGen中类的元数据信息在每次FullGC的时候可能会被收集，但成绩很难令人满意。而且应该为PermGen分配多大的空间很难确定，因为PermSize的大小依赖于很多因素，比如JVM加载的class的总数，常量池的大小，方法的大小等。</p>\n<p>此外，在HotSpot中的每个垃圾收集器需要专门的代码来处理存储在PermGen中的类的元数据信息。从PermGen分离类的元数据信息到Metaspace,由于Metaspace的分配具有和Java Heap相同的地址空间，因此Metaspace和Java Heap可以无缝的管理，而且简化了FullGC的过程，以至将来可以并行的对元数据信息进行垃圾收集，而没有GC暂停。<br><img src=\"http://i.imgur.com/WS0hb1g.jpg\" alt=\"\"></p>\n<h3 id=\"永久代的移除对最终用户意味着什么？\"><a href=\"#永久代的移除对最终用户意味着什么？\" class=\"headerlink\" title=\"永久代的移除对最终用户意味着什么？\"></a><a name=\"t2\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>永久代的移除对最终用户意味着什么？</h3><p>由于类的元数据可以在本地内存(native memory)之外分配,所以其最大可利用空间是整个系统内存的可用空间。这样，你将不再会遇到OOM错误，溢出的内存会涌入到交换空间。最终用户可以为类元数据指定最大可利用的本地内存空间，JVM也可以增加本地内存空间来满足类元数据信息的存储。</p>\n<p>注：永久代的移除并不意味者类加载器泄露的问题就没有了。因此，你仍然需要监控你的消费和计划，因为内存泄露会耗尽整个本地内存，导致内存交换(swapping)，这样只会变得更糟。</p>\n<h3 id=\"移动到Metaspace和它的内存分配\"><a href=\"#移动到Metaspace和它的内存分配\" class=\"headerlink\" title=\"移动到Metaspace和它的内存分配\"></a><a name=\"t3\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>移动到Metaspace和它的内存分配</h3><p>Metaspace VM利用内存管理技术来管理Metaspace。这使得由不同的垃圾收集器来处理类元数据的工作，现在仅仅由Metaspace VM在Metaspace中通过C++来进行管理。Metaspace背后的一个思想是，类和它的元数据的生命周期是和它的类加载器的生命周期一致的。也就是说，只要类的类加载器是存活的，在Metaspace中的类元数据也是存活的，不能被释放。</p>\n<p>之前我们不严格的使用这个术语“Metaspace”。更正式的，每个类加载器存储区叫做“a metaspace”。这些metaspaces一起总体称为”the Metaspace”。仅仅当类加载器不在存活，被垃圾收集器声明死亡后，该类加载器对应的metaspace空间才可以回收。Metaspace空间没有迁移和压缩。但是元数据会被扫描是否存在Java引用。</p>\n<p>Metaspace VM使用一个块分配器(chunking allocator)来管理Metaspace空间的内存分配。块的大小依赖于类加载器的类型。其中有一个全局的可使用的块列表（a global free list of chunks）。当类加载器需要一个块的时候，类加载器从全局块列表中取出一个块，添加到它自己维护的块列表中。当类加载器死亡，它的块将会被释放，归还给全局的块列表。块（chunk）会进一步被划分成blocks,每个block存储一个元数据单元(a unit of metadata)。Chunk中Blocks的分配线性的（pointer bump）。这些chunks被分配在内存映射空间(memory mapped(mmapped) spaces)之外。在一个全局的虚拟内存映射空间（global virtual mmapped spaces）的链表，当任何虚拟空间变为空时，就将该虚拟空间归还回操作系统。<br><img src=\"http://i.imgur.com/JFH75Lz.jpg\" alt=\"\"></p>\n<p>上面这幅图展示了Metaspace使用metachunks在mmapeded virual spaces分配的情形。类加载器1和3描述的是反射或匿名类加载器，使用“特定的”chunk尺寸。类加载器2和4使用小还是中等的chunk尺寸取决于加载的类数量。</p>\n<h3 id=\"Metaspace大小的调整和可以使用的工具\"><a href=\"#Metaspace大小的调整和可以使用的工具\" class=\"headerlink\" title=\"Metaspace大小的调整和可以使用的工具\"></a><a name=\"t4\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>Metaspace大小的调整和可以使用的工具</h3><p>正如前面提到了，Metaspace VM管理Metaspace空间的增长。但有时你会想通过在命令行显示的设置参数-XX:MaxMetaspaceSize来限制Metaspace空间的增长。默认情况下，-XX:MaxMetaspaceSize并没有限制，因此，在技术上，Metaspace的尺寸可以增长到交换空间，而你的本地内存分配将会失败。</p>\n<p>对于64位的服务器端JVM，-XX：MetaspaceSize的默认大小是21M。这是初始的限制值(the initial high watermark)。一旦达到这个限制值，FullGC将会被触发进行类卸载(当这些类的类加载器不再存活时)，然后这个high watermark被重置。新的high watermark的值依赖于空余Metaspace的容量。如果没有足够的空间被释放，high watermark的值将会上升；如果释放了大量的空间，那么high watermark的值将会下降。如果初始的watermark设置的太低，这个过程将会进行多次。你可以通过垃圾收集日志来显示的查看这个垃圾收集的过程。所以，一般建议在命令行设置一个较大的值给XX:MetaspaceSize来避免初始时的垃圾收集。</p>\n<p>每次垃圾收集之后，Metaspace VM会自动的调整high watermark，推迟下一次对Metaspace的垃圾收集。</p>\n<p>这两个参数，-XX：MinMetaspaceFreeRatio和-XX：MaxMetaspaceFreeRatio,类似于GC的FreeRatio参数，可以放在命令行。</p>\n<p>针对Metaspace，JDK自带的一些工具做了修改来展示Metaspace的信息：</p>\n<ul>\n<li><strong>jmap -clstats </strong>:打印类加载器的统计信息(取代了在JDK8之前打印类加载器信息的permstat)。一个例子的输出当运行DaCapo’s Avrora基准测试：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jmap -clstats </span><br><span class=\"line\">Attaching to process ID 6476, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is 25.5-b02</span><br><span class=\"line\">finding class loader instances ..done.</span><br><span class=\"line\">computing per loader stat ..done.</span><br><span class=\"line\">please wait.. computing liveness.liveness analysis may be inaccurate ...</span><br><span class=\"line\">class_loader classes bytes parent_loader alive? type </span><br><span class=\"line\">&lt;bootstrap\\&gt; 655 1222734 null live &lt;internal&gt; </span><br><span class=\"line\">0x000000074004a6c0000x000000074004a708dead java/util/ResourceBundle$RBClassLoader@0x00000007c0053e20</span><br><span class=\"line\">0x000000074004a76000 null dead sun/misc/Launcher$ExtClassLoader@0x00000007c002d248 0x00000007401189c8 1 1471</span><br><span class=\"line\">0x00000007400752f8dead sun/reflect/DelegatingClassLoader@0x00000007c0009870 0x000000074004a708116 3160530x000000074004a760 dead sun/misc/Launcher$AppClassLoader@0x00000007c0038190 </span><br><span class=\"line\">0x00000007400752f8538 7738540x000000074004a708 dead org/dacapo/harness/DacapoClassLoader@0x00000007c00638b0 </span><br><span class=\"line\">total = 6 1310 2314112 N/A alive=1, dead=5 N/A</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>jstat -gc </strong>:Metaspace的信息也会被打印出来，如下面的例子所示：<br><img src=\"http://i.imgur.com/oEE3iA5.jpg\" alt=\"\"></li>\n<li><strong>jcmd GC.class_stats</strong>:这是一个新的诊断命令，可以使用户连接到存活的JVM，转储Java类元数据的详细统计。</li>\n</ul>\n<p>注：在JDK8 build 13下，需要开启参数-XX：+UnlockDiagnosticVMOptions</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jcmd  help GC.class_stats</span><br><span class=\"line\">9522:</span><br><span class=\"line\">GC.class_stats </span><br><span class=\"line\">Provide statistics about Java class meta data. Requires -XX:+UnlockDiagnosticVMOptions. </span><br><span class=\"line\">Impact: High: Depends on Java heap size and content. </span><br><span class=\"line\">Syntax : GC.class_stats [options] [&lt;columns&gt;] </span><br><span class=\"line\">Arguments: </span><br><span class=\"line\">  columns : [optional] Comma-separated list of all the columns to show. If not specified, the following columns are shown: InstBytes,KlassBytes,CpAll,annotations,MethodCount,Bytecodes,MethodAll,ROAll,RWAll,Total (STRING, no default value) </span><br><span class=\"line\">Options: (options must be specified using the &lt;key&gt; or &lt;key&gt;=&lt;value&gt; syntax) </span><br><span class=\"line\">  -all : [optional] Show all columns (BOOLEAN, false) </span><br><span class=\"line\">  -csv : [optional] Print in CSV (comma-separated values) format for spreadsheets (BOOLEAN, false) </span><br><span class=\"line\">  -help : [optional] Show meaning of all the columns (BOOLEAN, false</span><br></pre></td></tr></table></figure>\n<p>注：对于列的更多信息，请查看<a href=\"https://bugs.openjdk.java.net/secure/attachment/11600/ver_010_help.txt\" target=\"_blank\" rel=\"external\">这里</a>。<br>一个输出列子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jcmd  GC.class_stats </span><br><span class=\"line\">7140:</span><br><span class=\"line\">Index Super InstBytes KlassBytes annotations CpAll MethodCount Bytecodes MethodAll ROAll RWAll Total ClassName </span><br><span class=\"line\">1 -1 426416 480 0 0 0 0 0 24 576 600 [C </span><br><span class=\"line\">2 -1 290136 480 0 0 0 0 0 40 576 616 [Lavrora.arch.legacy.LegacyInstr; </span><br><span class=\"line\">3 -1 269840 480 0 0 0 0 0 24 576 600 [B </span><br><span class=\"line\">4 43 137856 648 0 19248 129 4886 25288 16368 30568 46936 java.lang.Class </span><br><span class=\"line\">5 43 136968 624 0 8760 94 4570 33616 12072 32000 44072 java.lang.String </span><br><span class=\"line\">6 43 75872 560 0 1296 7 149 1400 880 2680 3560 java.util.HashMap$Node </span><br><span class=\"line\">7 836 57408 608 0 720 3 69 1480 528 2488 3016 avrora.sim.util.MulticastFSMProbe </span><br><span class=\"line\">8 43 55488 504 0 680 1 31 440 280 1536 1816 avrora.sim.FiniteStateMachine$State </span><br><span class=\"line\">9 -1 53712 480 0 0 0 0 0 24 576 600 [Ljava.lang.Object; </span><br><span class=\"line\">10 -1 49424 480 0 0 0 0 0 24 576 600 [I </span><br><span class=\"line\">11 -1 49248 480 0 0 0 0 0 24 576 600 [Lavrora.sim.platform.ExternalFlash$Page; </span><br><span class=\"line\">12 -1 24400 480 0 0 0 0 0 32 576 608 [Ljava.util.HashMap$Node; </span><br><span class=\"line\">13 394 21408 520 0 600 3 33 1216 432 2080 2512 avrora.sim.AtmelInterpreter$IORegBehavior </span><br><span class=\"line\">14 727 19800 672 0 968 4 71 1240 664 2472 3136 avrora.arch.legacy.LegacyInstr$MOVW </span><br><span class=\"line\">…&lt;snipped&gt; </span><br><span class=\"line\">…&lt;snipped&gt; </span><br><span class=\"line\">1299 1300 0 608 0 256 1 5 152 104 1024 1128 sun.util.resources.LocaleNamesBundle </span><br><span class=\"line\">1300 1098 0 608 0 1744 10 290 1808 1176 3208 4384 sun.util.resources.OpenListResourceBundle </span><br><span class=\"line\">1301 1098 0 616 0 2184 12 395 2200 1480 3800 5280 sun.util.resources.ParallelListResourceBundle </span><br><span class=\"line\"> 2244312 794288 2024 2260976 12801 561882 3135144 1906688 4684704 6591392 Total </span><br><span class=\"line\"> 34.0% 12.1% 0.0% 34.3% - 8.5% 47.6% 28.9% 71.1% 100.0% </span><br><span class=\"line\">Index Super InstBytes KlassBytes annotations CpAll MethodCount Bytecodes MethodAll ROAll RWAll Total ClassName</span><br></pre></td></tr></table></figure>\n<h3 id=\"当前的问题\"><a href=\"#当前的问题\" class=\"headerlink\" title=\"当前的问题\"></a>当前的问题</h3><p>先前提到的，Metaspace VM使用块分配器(chunking allocator)。chunk的大小取决于类加载器的类型。由于类class并没有一个固定的尺寸，这就存在这样一种可能：可分配的chunk的尺寸和需要的chunk的尺寸不相等，这就会导致内存碎片。Metaspace VM还没有使用压缩技术，所以内存碎片是现在的一个主要关注的问题。<br><img src=\"http://i.imgur.com/5424Rjo.jpg\" alt=\"\"></p>\n<p><a href=\"http://ifeve.com/java-permgen-removed/\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n","excerpt":"<h3 id=\"Java-PermGen-去哪里了\"><a href=\"#Java-PermGen-去哪里了\" class=\"headerlink\" title=\"Java PermGen 去哪里了?\"></a>Java PermGen 去哪里了?</h3><p><a href=\"http://www.infoq.com/articles/Java-PERMGEN-Removed\">原文链接</a>：原文作者：Monica Beckwith  以下为本人翻译，仅用于交流学习，版权归原作者和InfoQ所有，转载注明出处，请不要用于商业用途</p>\n<p>在Java虚拟机(JVM)内部，class文件中包括类的版本、字段、方法、接口等描述信息，还有运行时常量池，用于存放编译器生成的各种字面量和符号引用。</p>\n<p>在过去（自定义类加载器还不是很常见的时候），类大多是”static”的，很少被卸载或收集，因此被称为“永久的(Permanent)”。同时，由于类class是JVM实现的一部分，并不是由应用创建的，所以又被认为是“非堆(non-heap)”内存。</p>","more":"<p>在JDK8之前的HotSpot JVM，存放这些”永久的”的区域叫做“永久代(permanent generation)”。永久代是一片连续的堆空间，在JVM启动之前通过在命令行设置参数-XX:MaxPermSize来设定永久代最大可分配的内存空间，默认大小是64M（64位JVM由于指针膨胀，默认是85M）。永久代的垃圾收集是和老年代(old generation)捆绑在一起的，因此无论谁满了，都会触发永久代和老年代的垃圾收集。不过，一个明显的问题是，当JVM加载的类信息容量超过了参数-XX：MaxPermSize设定的值时，应用将会报OOM的错误(对于这句话，译者的理解是：32位的JVM默认MaxPermSize是64M，而JDK8里的Metaspace，也可以通过参数-XX:MetaspaceSize 和-XX:MaxMetaspaceSize设定大小，但如果不指定MaxMetaspaceSize的话，Metaspace的大小仅受限于native memory的剩余大小。也就是说永久代的最大空间一定得有个指定值，而如果MaxPermSize指定不当，就会OOM)。</p>\n<p>注：在JDK7之前的版本，对于HopSpot JVM，interned-strings存储在永久代（又名PermGen），会导致大量的性能问题和OOM错误。从PermGen移除interned strings的更多信息查看<a href=\"http://bugs.java.com/view_bug.do?bug_id=6962931\">这里</a>。</p>\n<p>译者注：从JDK7开始永久代的移除工作，贮存在永久代的一部分数据已经转移到了Java Heap或者是Native Heap。但永久代仍然存在于JDK7，并没有完全的移除：符号引用(Symbols)转移到了native heap;字面量(interned strings)转移到了java heap;类的静态变量(class statics)转移到了java heap。</p>\n<p>在JDK7 update 4即随后的版本中，提供了完整的支持对于Garbage-First(G1)垃圾收集器，以取代在JDK5中发布的CMS收集器。使用G1，PermGen仅仅在FullGC（stop-the-word,STW）时才会被收集。G1仅仅在PermGen满了或者应用分配内存的速度比G1并发垃圾收集速度快的时候才触发FullGC。</p>\n<p>而对于CMS收集器，通过开启布尔参数-XX:+CMSClassUnloadingEnabled来并发对PermGen进行收集。对于G1没有类似的选项，G1只能通过FullGC，stop the world,来对PermGen进行收集。</p>\n<p>永久代在JDK8中被完全的移除了。所以永久代的参数-XX:PermSize和-XX：MaxPermSize也被移除了。</p>\n<p>在JDK8中,classe metadata(the virtual machines internal presentation of Java class),被存储在叫做Metaspace的native memory。一些新的flags被加入：<br>-XX:MetaspaceSize，class metadata的初始空间配额，以bytes为单位，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当的降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize（如果设置了的话），适当的提高该值。<br>-XX：MaxMetaspaceSize，可以为class metadata分配的最大空间。默认是没有限制的。<br>-XX：MinMetaspaceFreeRatio,在GC之后，最小的Metaspace剩余空间容量的百分比，减少为class metadata分配空间导致的垃圾收集<br>-XX:MaxMetaspaceFreeRatio,在GC之后，最大的Metaspace剩余空间容量的百分比，减少为class metadata释放空间导致的垃圾收集</p>\n<p>默认情况下，class metadata的分配仅受限于可用的native memory总量。可以使用MaxMetaspaceSize来限制可为class metadata分配的最大内存。当class metadata的使用的内存达到MetaspaceSize(32位clientVM默认12Mbytes,32位ServerVM默认是16Mbytes)时就会对死亡的类加载器和类进行垃圾收集。设置MetaspaceSize为一个较高的值可以推迟垃圾收集的发生。</p>\n<p>Native Heap，就是C-Heap。对于32位的JVM，C-Heap的容量=4G-Java Heap-PermGen；对于64位的JVM，C-Heap的容量=物理服务器的总RAM+虚拟内存-Java Heap-PermGen</p>\n<p>这里科普下，在Windows下称为虚拟内存(virtual memory),在Linux下称为交换空间(swap space),用于当系统需要更多的内存资源而物理内存已经满了的情况下，将物理内存中不活跃的页转移到磁盘上的交换空间中。</p>\n<p>在JDK8，Native Memory，包括Metaspace和C-Heap。</p>\n<p>IBM的J9和Oracle的JRockit(收购BEA公司的JVM)都没有永久代的概念，而Oracle移除HotSpot中的永久代的原因之一是为了与JRockit合并，以充分利用各自的特点。</p>\n<h3 id=\"再见，再见PermGen，你好Metaspace\"><a href=\"#再见，再见PermGen，你好Metaspace\" class=\"headerlink\" title=\"再见，再见PermGen，你好Metaspace\"></a><a name=\"t1\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>再见，再见PermGen，你好Metaspace</h3><p>随着JDK8的到来，JVM不再有PermGen。但类的元数据信息（metadata）还在，只不过不再是存储在连续的堆空间上，而是移动到叫做“Metaspace”的本地内存（Native memory）中。</p>\n<p>类的元数据信息转移到Metaspace的原因是PermGen很难调整。PermGen中类的元数据信息在每次FullGC的时候可能会被收集，但成绩很难令人满意。而且应该为PermGen分配多大的空间很难确定，因为PermSize的大小依赖于很多因素，比如JVM加载的class的总数，常量池的大小，方法的大小等。</p>\n<p>此外，在HotSpot中的每个垃圾收集器需要专门的代码来处理存储在PermGen中的类的元数据信息。从PermGen分离类的元数据信息到Metaspace,由于Metaspace的分配具有和Java Heap相同的地址空间，因此Metaspace和Java Heap可以无缝的管理，而且简化了FullGC的过程，以至将来可以并行的对元数据信息进行垃圾收集，而没有GC暂停。<br><img src=\"http://i.imgur.com/WS0hb1g.jpg\" alt=\"\"></p>\n<h3 id=\"永久代的移除对最终用户意味着什么？\"><a href=\"#永久代的移除对最终用户意味着什么？\" class=\"headerlink\" title=\"永久代的移除对最终用户意味着什么？\"></a><a name=\"t2\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>永久代的移除对最终用户意味着什么？</h3><p>由于类的元数据可以在本地内存(native memory)之外分配,所以其最大可利用空间是整个系统内存的可用空间。这样，你将不再会遇到OOM错误，溢出的内存会涌入到交换空间。最终用户可以为类元数据指定最大可利用的本地内存空间，JVM也可以增加本地内存空间来满足类元数据信息的存储。</p>\n<p>注：永久代的移除并不意味者类加载器泄露的问题就没有了。因此，你仍然需要监控你的消费和计划，因为内存泄露会耗尽整个本地内存，导致内存交换(swapping)，这样只会变得更糟。</p>\n<h3 id=\"移动到Metaspace和它的内存分配\"><a href=\"#移动到Metaspace和它的内存分配\" class=\"headerlink\" title=\"移动到Metaspace和它的内存分配\"></a><a name=\"t3\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>移动到Metaspace和它的内存分配</h3><p>Metaspace VM利用内存管理技术来管理Metaspace。这使得由不同的垃圾收集器来处理类元数据的工作，现在仅仅由Metaspace VM在Metaspace中通过C++来进行管理。Metaspace背后的一个思想是，类和它的元数据的生命周期是和它的类加载器的生命周期一致的。也就是说，只要类的类加载器是存活的，在Metaspace中的类元数据也是存活的，不能被释放。</p>\n<p>之前我们不严格的使用这个术语“Metaspace”。更正式的，每个类加载器存储区叫做“a metaspace”。这些metaspaces一起总体称为”the Metaspace”。仅仅当类加载器不在存活，被垃圾收集器声明死亡后，该类加载器对应的metaspace空间才可以回收。Metaspace空间没有迁移和压缩。但是元数据会被扫描是否存在Java引用。</p>\n<p>Metaspace VM使用一个块分配器(chunking allocator)来管理Metaspace空间的内存分配。块的大小依赖于类加载器的类型。其中有一个全局的可使用的块列表（a global free list of chunks）。当类加载器需要一个块的时候，类加载器从全局块列表中取出一个块，添加到它自己维护的块列表中。当类加载器死亡，它的块将会被释放，归还给全局的块列表。块（chunk）会进一步被划分成blocks,每个block存储一个元数据单元(a unit of metadata)。Chunk中Blocks的分配线性的（pointer bump）。这些chunks被分配在内存映射空间(memory mapped(mmapped) spaces)之外。在一个全局的虚拟内存映射空间（global virtual mmapped spaces）的链表，当任何虚拟空间变为空时，就将该虚拟空间归还回操作系统。<br><img src=\"http://i.imgur.com/JFH75Lz.jpg\" alt=\"\"></p>\n<p>上面这幅图展示了Metaspace使用metachunks在mmapeded virual spaces分配的情形。类加载器1和3描述的是反射或匿名类加载器，使用“特定的”chunk尺寸。类加载器2和4使用小还是中等的chunk尺寸取决于加载的类数量。</p>\n<h3 id=\"Metaspace大小的调整和可以使用的工具\"><a href=\"#Metaspace大小的调整和可以使用的工具\" class=\"headerlink\" title=\"Metaspace大小的调整和可以使用的工具\"></a><a name=\"t4\" style=\"text-decoration: underline; outline: none; color: rgb(0, 161, 158);\"></a>Metaspace大小的调整和可以使用的工具</h3><p>正如前面提到了，Metaspace VM管理Metaspace空间的增长。但有时你会想通过在命令行显示的设置参数-XX:MaxMetaspaceSize来限制Metaspace空间的增长。默认情况下，-XX:MaxMetaspaceSize并没有限制，因此，在技术上，Metaspace的尺寸可以增长到交换空间，而你的本地内存分配将会失败。</p>\n<p>对于64位的服务器端JVM，-XX：MetaspaceSize的默认大小是21M。这是初始的限制值(the initial high watermark)。一旦达到这个限制值，FullGC将会被触发进行类卸载(当这些类的类加载器不再存活时)，然后这个high watermark被重置。新的high watermark的值依赖于空余Metaspace的容量。如果没有足够的空间被释放，high watermark的值将会上升；如果释放了大量的空间，那么high watermark的值将会下降。如果初始的watermark设置的太低，这个过程将会进行多次。你可以通过垃圾收集日志来显示的查看这个垃圾收集的过程。所以，一般建议在命令行设置一个较大的值给XX:MetaspaceSize来避免初始时的垃圾收集。</p>\n<p>每次垃圾收集之后，Metaspace VM会自动的调整high watermark，推迟下一次对Metaspace的垃圾收集。</p>\n<p>这两个参数，-XX：MinMetaspaceFreeRatio和-XX：MaxMetaspaceFreeRatio,类似于GC的FreeRatio参数，可以放在命令行。</p>\n<p>针对Metaspace，JDK自带的一些工具做了修改来展示Metaspace的信息：</p>\n<ul>\n<li><strong>jmap -clstats </strong>:打印类加载器的统计信息(取代了在JDK8之前打印类加载器信息的permstat)。一个例子的输出当运行DaCapo’s Avrora基准测试：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jmap -clstats </span><br><span class=\"line\">Attaching to process ID 6476, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is 25.5-b02</span><br><span class=\"line\">finding class loader instances ..done.</span><br><span class=\"line\">computing per loader stat ..done.</span><br><span class=\"line\">please wait.. computing liveness.liveness analysis may be inaccurate ...</span><br><span class=\"line\">class_loader classes bytes parent_loader alive? type </span><br><span class=\"line\">&lt;bootstrap\\&gt; 655 1222734 null live &lt;internal&gt; </span><br><span class=\"line\">0x000000074004a6c0000x000000074004a708dead java/util/ResourceBundle$RBClassLoader@0x00000007c0053e20</span><br><span class=\"line\">0x000000074004a76000 null dead sun/misc/Launcher$ExtClassLoader@0x00000007c002d248 0x00000007401189c8 1 1471</span><br><span class=\"line\">0x00000007400752f8dead sun/reflect/DelegatingClassLoader@0x00000007c0009870 0x000000074004a708116 3160530x000000074004a760 dead sun/misc/Launcher$AppClassLoader@0x00000007c0038190 </span><br><span class=\"line\">0x00000007400752f8538 7738540x000000074004a708 dead org/dacapo/harness/DacapoClassLoader@0x00000007c00638b0 </span><br><span class=\"line\">total = 6 1310 2314112 N/A alive=1, dead=5 N/A</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>jstat -gc </strong>:Metaspace的信息也会被打印出来，如下面的例子所示：<br><img src=\"http://i.imgur.com/oEE3iA5.jpg\" alt=\"\"></li>\n<li><strong>jcmd GC.class_stats</strong>:这是一个新的诊断命令，可以使用户连接到存活的JVM，转储Java类元数据的详细统计。</li>\n</ul>\n<p>注：在JDK8 build 13下，需要开启参数-XX：+UnlockDiagnosticVMOptions</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jcmd  help GC.class_stats</span><br><span class=\"line\">9522:</span><br><span class=\"line\">GC.class_stats </span><br><span class=\"line\">Provide statistics about Java class meta data. Requires -XX:+UnlockDiagnosticVMOptions. </span><br><span class=\"line\">Impact: High: Depends on Java heap size and content. </span><br><span class=\"line\">Syntax : GC.class_stats [options] [&lt;columns&gt;] </span><br><span class=\"line\">Arguments: </span><br><span class=\"line\">  columns : [optional] Comma-separated list of all the columns to show. If not specified, the following columns are shown: InstBytes,KlassBytes,CpAll,annotations,MethodCount,Bytecodes,MethodAll,ROAll,RWAll,Total (STRING, no default value) </span><br><span class=\"line\">Options: (options must be specified using the &lt;key&gt; or &lt;key&gt;=&lt;value&gt; syntax) </span><br><span class=\"line\">  -all : [optional] Show all columns (BOOLEAN, false) </span><br><span class=\"line\">  -csv : [optional] Print in CSV (comma-separated values) format for spreadsheets (BOOLEAN, false) </span><br><span class=\"line\">  -help : [optional] Show meaning of all the columns (BOOLEAN, false</span><br></pre></td></tr></table></figure>\n<p>注：对于列的更多信息，请查看<a href=\"https://bugs.openjdk.java.net/secure/attachment/11600/ver_010_help.txt\">这里</a>。<br>一个输出列子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jcmd  GC.class_stats </span><br><span class=\"line\">7140:</span><br><span class=\"line\">Index Super InstBytes KlassBytes annotations CpAll MethodCount Bytecodes MethodAll ROAll RWAll Total ClassName </span><br><span class=\"line\">1 -1 426416 480 0 0 0 0 0 24 576 600 [C </span><br><span class=\"line\">2 -1 290136 480 0 0 0 0 0 40 576 616 [Lavrora.arch.legacy.LegacyInstr; </span><br><span class=\"line\">3 -1 269840 480 0 0 0 0 0 24 576 600 [B </span><br><span class=\"line\">4 43 137856 648 0 19248 129 4886 25288 16368 30568 46936 java.lang.Class </span><br><span class=\"line\">5 43 136968 624 0 8760 94 4570 33616 12072 32000 44072 java.lang.String </span><br><span class=\"line\">6 43 75872 560 0 1296 7 149 1400 880 2680 3560 java.util.HashMap$Node </span><br><span class=\"line\">7 836 57408 608 0 720 3 69 1480 528 2488 3016 avrora.sim.util.MulticastFSMProbe </span><br><span class=\"line\">8 43 55488 504 0 680 1 31 440 280 1536 1816 avrora.sim.FiniteStateMachine$State </span><br><span class=\"line\">9 -1 53712 480 0 0 0 0 0 24 576 600 [Ljava.lang.Object; </span><br><span class=\"line\">10 -1 49424 480 0 0 0 0 0 24 576 600 [I </span><br><span class=\"line\">11 -1 49248 480 0 0 0 0 0 24 576 600 [Lavrora.sim.platform.ExternalFlash$Page; </span><br><span class=\"line\">12 -1 24400 480 0 0 0 0 0 32 576 608 [Ljava.util.HashMap$Node; </span><br><span class=\"line\">13 394 21408 520 0 600 3 33 1216 432 2080 2512 avrora.sim.AtmelInterpreter$IORegBehavior </span><br><span class=\"line\">14 727 19800 672 0 968 4 71 1240 664 2472 3136 avrora.arch.legacy.LegacyInstr$MOVW </span><br><span class=\"line\">…&lt;snipped&gt; </span><br><span class=\"line\">…&lt;snipped&gt; </span><br><span class=\"line\">1299 1300 0 608 0 256 1 5 152 104 1024 1128 sun.util.resources.LocaleNamesBundle </span><br><span class=\"line\">1300 1098 0 608 0 1744 10 290 1808 1176 3208 4384 sun.util.resources.OpenListResourceBundle </span><br><span class=\"line\">1301 1098 0 616 0 2184 12 395 2200 1480 3800 5280 sun.util.resources.ParallelListResourceBundle </span><br><span class=\"line\"> 2244312 794288 2024 2260976 12801 561882 3135144 1906688 4684704 6591392 Total </span><br><span class=\"line\"> 34.0% 12.1% 0.0% 34.3% - 8.5% 47.6% 28.9% 71.1% 100.0% </span><br><span class=\"line\">Index Super InstBytes KlassBytes annotations CpAll MethodCount Bytecodes MethodAll ROAll RWAll Total ClassName</span><br></pre></td></tr></table></figure>\n<h3 id=\"当前的问题\"><a href=\"#当前的问题\" class=\"headerlink\" title=\"当前的问题\"></a>当前的问题</h3><p>先前提到的，Metaspace VM使用块分配器(chunking allocator)。chunk的大小取决于类加载器的类型。由于类class并没有一个固定的尺寸，这就存在这样一种可能：可分配的chunk的尺寸和需要的chunk的尺寸不相等，这就会导致内存碎片。Metaspace VM还没有使用压缩技术，所以内存碎片是现在的一个主要关注的问题。<br><img src=\"http://i.imgur.com/5424Rjo.jpg\" alt=\"\"></p>\n<p><a href=\"http://ifeve.com/java-permgen-removed/\">原文地址</a></p>"},{"title":"comparator接口与Comparable接口的区别","date":"2016-05-12T12:31:44.000Z","_content":"\n\n\n##### 1. Comparator 和 Comparable 相同的地方\n\n\n他们都是java的一个接口, 并且是用来对自定义的class比较大小的,\n\n\n什么是自定义class: 如 public class Person{ String name; int age }.\n\n\n当我们有这么一个personList,里面包含了person1, person2, persion3....., 我们用Collections.sort( personList ), \n\n是得不到预期的结果的. 这时肯定有人要问, 那为什么可以排序一个字符串list呢:\n<!-- more -->\n\n如 StringList{\"hello1\" , \"hello3\" , \"hello2\"}, Collections.sort( stringList ) 能够得到正确的排序, 那是因为 \n\nString 这个对象已经帮我们实现了 Comparable接口 , 所以我们的 Person 如果想排序, 也要实现一个比较器。\n\n   \n\n##### 2. Comparator 和 Comparable 的区别\n\n\n ** Comparable**\n\n\nComparable 定义在 Person类的内部:\n\n\npublic class Persion implements Comparable {..比较Person的大小..},\n\n\n 因为已经实现了比较器,那么我们的Person现在是一个可以比较大小的对象了,它的比较功能和String完全一样,可以随时随地的拿来\n\n比较大小,因为Person现在自身就是有大小之分的。Collections.sort(personList)可以得到正确的结果。\n\n\n** Comparator**\n\n\nComparator 是定义在Person的外部的, 此时我们的Person类的结构不需要有任何变化,如\n\n\npublic class Person{ String name; int age },\n\n\n然后我们另外定义一个比较器:\n\n\npublic PersonComparator implements Comparator() {..比较Person的大小..},\n\n\n在PersonComparator里面实现了怎么比较两个Person的大小. 所以,用这种方法,当我们要对一个 personList进行排序的时候, \n\n我们除了了要传递personList过去, 还需要把PersonComparator传递过去,因为怎么比较Person的大小是在PersonComparator\n\n里面实现的, 如:\n\n\nCollections.sort( personList , new PersonComparator() ).\n\n\n##### 3. Comparator 和 Comparable 的实例\n\n\n** Comparable:**\n\n\n实现Comparable接口要覆盖compareTo方法, 在compareTo方法里面实现比较：\n\n``` java \npublic class Person implements Comparable {\n\n     String name;\n\n     int age\n\n     public int compareTo(Person another) {\n\n          int i = 0;\n\n          i = name.compareTo(another.name); // 使用字符串的比较\n\n          if(i == 0) { // 如果名字一样,比较年龄, 返回比较年龄结果\n\n               return age - another.age;\n\n          } else {\n\n               return i; // 名字不一样, 返回比较名字的结果.\n\n          }\n\n     }\n\n}\n```\n\n   这时我们可以直接用 Collections.sort( personList ) 对其排序了.\n\n\n** Comparator:**\n\n\n实现Comparator需要覆盖 compare 方法：\n```java\npublic class Person{\n\n     String name;\n\n     int age\n\n}\n```\n``` java\nclass PersonComparator implements Comparator { \n\n     public int compare(Person one, Person another) {\n\n          int i = 0;\n\n          i = one.name.compareTo(another.name); // 使用字符串的比较\n\n          if(i == 0) { // 如果名字一样,比较年龄,返回比较年龄结果\n\n               return one.age - another.age;\n\n          } else {\n\n               return i; // 名字不一样, 返回比较名字的结果.\n\n          }\n\n     }\n\n}`\n```\n   Collections.sort( personList , new PersonComparator()) 可以对其排序\n\n\n##### 4:总结\n\n\n两种方法各有优劣, 用Comparable 简单, 只要实现Comparable 接口的对象直接就成为一个可以比较的对象,\n\n但是需要修改源代码, 用Comparator 的好处是不需要修改源代码, 而是另外实现一个比较器, 当某个自定义\n\n的对象需要作比较的时候,把比较器和对象一起传递过去就可以比大小了, 并且在Comparator 里面用户可以自\n\n己实现复杂的可以通用的逻辑,使其可以匹配一些比较简单的对象,那样就可以节省很多重复劳动了。\n\n\n  [原文地址](http://www.cnblogs.com/sunflower627/p/3158042.html \"原文地址\")\n","source":"_posts/comparator接口与Comparable接口的区别.md","raw":"---\ntitle: comparator接口与Comparable接口的区别\ndate: 2016-05-12 20:31:44\ntags: java\ncategory: java\n\n---\n\n\n\n##### 1. Comparator 和 Comparable 相同的地方\n\n\n他们都是java的一个接口, 并且是用来对自定义的class比较大小的,\n\n\n什么是自定义class: 如 public class Person{ String name; int age }.\n\n\n当我们有这么一个personList,里面包含了person1, person2, persion3....., 我们用Collections.sort( personList ), \n\n是得不到预期的结果的. 这时肯定有人要问, 那为什么可以排序一个字符串list呢:\n<!-- more -->\n\n如 StringList{\"hello1\" , \"hello3\" , \"hello2\"}, Collections.sort( stringList ) 能够得到正确的排序, 那是因为 \n\nString 这个对象已经帮我们实现了 Comparable接口 , 所以我们的 Person 如果想排序, 也要实现一个比较器。\n\n   \n\n##### 2. Comparator 和 Comparable 的区别\n\n\n ** Comparable**\n\n\nComparable 定义在 Person类的内部:\n\n\npublic class Persion implements Comparable {..比较Person的大小..},\n\n\n 因为已经实现了比较器,那么我们的Person现在是一个可以比较大小的对象了,它的比较功能和String完全一样,可以随时随地的拿来\n\n比较大小,因为Person现在自身就是有大小之分的。Collections.sort(personList)可以得到正确的结果。\n\n\n** Comparator**\n\n\nComparator 是定义在Person的外部的, 此时我们的Person类的结构不需要有任何变化,如\n\n\npublic class Person{ String name; int age },\n\n\n然后我们另外定义一个比较器:\n\n\npublic PersonComparator implements Comparator() {..比较Person的大小..},\n\n\n在PersonComparator里面实现了怎么比较两个Person的大小. 所以,用这种方法,当我们要对一个 personList进行排序的时候, \n\n我们除了了要传递personList过去, 还需要把PersonComparator传递过去,因为怎么比较Person的大小是在PersonComparator\n\n里面实现的, 如:\n\n\nCollections.sort( personList , new PersonComparator() ).\n\n\n##### 3. Comparator 和 Comparable 的实例\n\n\n** Comparable:**\n\n\n实现Comparable接口要覆盖compareTo方法, 在compareTo方法里面实现比较：\n\n``` java \npublic class Person implements Comparable {\n\n     String name;\n\n     int age\n\n     public int compareTo(Person another) {\n\n          int i = 0;\n\n          i = name.compareTo(another.name); // 使用字符串的比较\n\n          if(i == 0) { // 如果名字一样,比较年龄, 返回比较年龄结果\n\n               return age - another.age;\n\n          } else {\n\n               return i; // 名字不一样, 返回比较名字的结果.\n\n          }\n\n     }\n\n}\n```\n\n   这时我们可以直接用 Collections.sort( personList ) 对其排序了.\n\n\n** Comparator:**\n\n\n实现Comparator需要覆盖 compare 方法：\n```java\npublic class Person{\n\n     String name;\n\n     int age\n\n}\n```\n``` java\nclass PersonComparator implements Comparator { \n\n     public int compare(Person one, Person another) {\n\n          int i = 0;\n\n          i = one.name.compareTo(another.name); // 使用字符串的比较\n\n          if(i == 0) { // 如果名字一样,比较年龄,返回比较年龄结果\n\n               return one.age - another.age;\n\n          } else {\n\n               return i; // 名字不一样, 返回比较名字的结果.\n\n          }\n\n     }\n\n}`\n```\n   Collections.sort( personList , new PersonComparator()) 可以对其排序\n\n\n##### 4:总结\n\n\n两种方法各有优劣, 用Comparable 简单, 只要实现Comparable 接口的对象直接就成为一个可以比较的对象,\n\n但是需要修改源代码, 用Comparator 的好处是不需要修改源代码, 而是另外实现一个比较器, 当某个自定义\n\n的对象需要作比较的时候,把比较器和对象一起传递过去就可以比大小了, 并且在Comparator 里面用户可以自\n\n己实现复杂的可以通用的逻辑,使其可以匹配一些比较简单的对象,那样就可以节省很多重复劳动了。\n\n\n  [原文地址](http://www.cnblogs.com/sunflower627/p/3158042.html \"原文地址\")\n","slug":"comparator接口与Comparable接口的区别","published":1,"updated":"2016-05-13T14:46:20.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy5uy39h000828rx4p68m2vy","content":"<h5 id=\"1-Comparator-和-Comparable-相同的地方\"><a href=\"#1-Comparator-和-Comparable-相同的地方\" class=\"headerlink\" title=\"1. Comparator 和 Comparable 相同的地方\"></a>1. Comparator 和 Comparable 相同的地方</h5><p>他们都是java的一个接口, 并且是用来对自定义的class比较大小的,</p>\n<p>什么是自定义class: 如 public class Person{ String name; int age }.</p>\n<p>当我们有这么一个personList,里面包含了person1, person2, persion3….., 我们用Collections.sort( personList ), </p>\n<p>是得不到预期的结果的. 这时肯定有人要问, 那为什么可以排序一个字符串list呢:<br><a id=\"more\"></a></p>\n<p>如 StringList{“hello1” , “hello3” , “hello2”}, Collections.sort( stringList ) 能够得到正确的排序, 那是因为 </p>\n<p>String 这个对象已经帮我们实现了 Comparable接口 , 所以我们的 Person 如果想排序, 也要实现一个比较器。</p>\n<h5 id=\"2-Comparator-和-Comparable-的区别\"><a href=\"#2-Comparator-和-Comparable-的区别\" class=\"headerlink\" title=\"2. Comparator 和 Comparable 的区别\"></a>2. Comparator 和 Comparable 的区别</h5><p> <strong> Comparable</strong></p>\n<p>Comparable 定义在 Person类的内部:</p>\n<p>public class Persion implements Comparable {..比较Person的大小..},</p>\n<p> 因为已经实现了比较器,那么我们的Person现在是一个可以比较大小的对象了,它的比较功能和String完全一样,可以随时随地的拿来</p>\n<p>比较大小,因为Person现在自身就是有大小之分的。Collections.sort(personList)可以得到正确的结果。</p>\n<p><strong> Comparator</strong></p>\n<p>Comparator 是定义在Person的外部的, 此时我们的Person类的结构不需要有任何变化,如</p>\n<p>public class Person{ String name; int age },</p>\n<p>然后我们另外定义一个比较器:</p>\n<p>public PersonComparator implements Comparator() {..比较Person的大小..},</p>\n<p>在PersonComparator里面实现了怎么比较两个Person的大小. 所以,用这种方法,当我们要对一个 personList进行排序的时候, </p>\n<p>我们除了了要传递personList过去, 还需要把PersonComparator传递过去,因为怎么比较Person的大小是在PersonComparator</p>\n<p>里面实现的, 如:</p>\n<p>Collections.sort( personList , new PersonComparator() ).</p>\n<h5 id=\"3-Comparator-和-Comparable-的实例\"><a href=\"#3-Comparator-和-Comparable-的实例\" class=\"headerlink\" title=\"3. Comparator 和 Comparable 的实例\"></a>3. Comparator 和 Comparable 的实例</h5><p><strong> Comparable:</strong></p>\n<p>实现Comparable接口要覆盖compareTo方法, 在compareTo方法里面实现比较：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     String name;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">int</span> age</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Person another)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          i = name.compareTo(another.name); <span class=\"comment\">// 使用字符串的比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果名字一样,比较年龄, 返回比较年龄结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">return</span> age - another.age;</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">return</span> i; <span class=\"comment\">// 名字不一样, 返回比较名字的结果.</span></span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>   这时我们可以直接用 Collections.sort( personList ) 对其排序了.</p>\n<p><strong> Comparator:</strong></p>\n<p>实现Comparator需要覆盖 compare 方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     String name;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">int</span> age</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span> </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Person one, Person another)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          i = one.name.compareTo(another.name); <span class=\"comment\">// 使用字符串的比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果名字一样,比较年龄,返回比较年龄结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">return</span> one.age - another.age;</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">return</span> i; <span class=\"comment\">// 名字不一样, 返回比较名字的结果.</span></span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;`</span><br></pre></td></tr></table></figure>\n<p>   Collections.sort( personList , new PersonComparator()) 可以对其排序</p>\n<h5 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4:总结\"></a>4:总结</h5><p>两种方法各有优劣, 用Comparable 简单, 只要实现Comparable 接口的对象直接就成为一个可以比较的对象,</p>\n<p>但是需要修改源代码, 用Comparator 的好处是不需要修改源代码, 而是另外实现一个比较器, 当某个自定义</p>\n<p>的对象需要作比较的时候,把比较器和对象一起传递过去就可以比大小了, 并且在Comparator 里面用户可以自</p>\n<p>己实现复杂的可以通用的逻辑,使其可以匹配一些比较简单的对象,那样就可以节省很多重复劳动了。</p>\n<p>  <a href=\"http://www.cnblogs.com/sunflower627/p/3158042.html\" title=\"原文地址\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n","excerpt":"<h5 id=\"1-Comparator-和-Comparable-相同的地方\"><a href=\"#1-Comparator-和-Comparable-相同的地方\" class=\"headerlink\" title=\"1. Comparator 和 Comparable 相同的地方\"></a>1. Comparator 和 Comparable 相同的地方</h5><p>他们都是java的一个接口, 并且是用来对自定义的class比较大小的,</p>\n<p>什么是自定义class: 如 public class Person{ String name; int age }.</p>\n<p>当我们有这么一个personList,里面包含了person1, person2, persion3….., 我们用Collections.sort( personList ), </p>\n<p>是得不到预期的结果的. 这时肯定有人要问, 那为什么可以排序一个字符串list呢:<br>","more":"</p>\n<p>如 StringList{“hello1” , “hello3” , “hello2”}, Collections.sort( stringList ) 能够得到正确的排序, 那是因为 </p>\n<p>String 这个对象已经帮我们实现了 Comparable接口 , 所以我们的 Person 如果想排序, 也要实现一个比较器。</p>\n<h5 id=\"2-Comparator-和-Comparable-的区别\"><a href=\"#2-Comparator-和-Comparable-的区别\" class=\"headerlink\" title=\"2. Comparator 和 Comparable 的区别\"></a>2. Comparator 和 Comparable 的区别</h5><p> <strong> Comparable</strong></p>\n<p>Comparable 定义在 Person类的内部:</p>\n<p>public class Persion implements Comparable {..比较Person的大小..},</p>\n<p> 因为已经实现了比较器,那么我们的Person现在是一个可以比较大小的对象了,它的比较功能和String完全一样,可以随时随地的拿来</p>\n<p>比较大小,因为Person现在自身就是有大小之分的。Collections.sort(personList)可以得到正确的结果。</p>\n<p><strong> Comparator</strong></p>\n<p>Comparator 是定义在Person的外部的, 此时我们的Person类的结构不需要有任何变化,如</p>\n<p>public class Person{ String name; int age },</p>\n<p>然后我们另外定义一个比较器:</p>\n<p>public PersonComparator implements Comparator() {..比较Person的大小..},</p>\n<p>在PersonComparator里面实现了怎么比较两个Person的大小. 所以,用这种方法,当我们要对一个 personList进行排序的时候, </p>\n<p>我们除了了要传递personList过去, 还需要把PersonComparator传递过去,因为怎么比较Person的大小是在PersonComparator</p>\n<p>里面实现的, 如:</p>\n<p>Collections.sort( personList , new PersonComparator() ).</p>\n<h5 id=\"3-Comparator-和-Comparable-的实例\"><a href=\"#3-Comparator-和-Comparable-的实例\" class=\"headerlink\" title=\"3. Comparator 和 Comparable 的实例\"></a>3. Comparator 和 Comparable 的实例</h5><p><strong> Comparable:</strong></p>\n<p>实现Comparable接口要覆盖compareTo方法, 在compareTo方法里面实现比较：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     String name;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">int</span> age</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Person another)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          i = name.compareTo(another.name); <span class=\"comment\">// 使用字符串的比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果名字一样,比较年龄, 返回比较年龄结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">return</span> age - another.age;</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">return</span> i; <span class=\"comment\">// 名字不一样, 返回比较名字的结果.</span></span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>   这时我们可以直接用 Collections.sort( personList ) 对其排序了.</p>\n<p><strong> Comparator:</strong></p>\n<p>实现Comparator需要覆盖 compare 方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     String name;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">int</span> age</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span> </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Person one, Person another)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          i = one.name.compareTo(another.name); <span class=\"comment\">// 使用字符串的比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果名字一样,比较年龄,返回比较年龄结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">return</span> one.age - another.age;</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">return</span> i; <span class=\"comment\">// 名字不一样, 返回比较名字的结果.</span></span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;`</span><br></pre></td></tr></table></figure>\n<p>   Collections.sort( personList , new PersonComparator()) 可以对其排序</p>\n<h5 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4:总结\"></a>4:总结</h5><p>两种方法各有优劣, 用Comparable 简单, 只要实现Comparable 接口的对象直接就成为一个可以比较的对象,</p>\n<p>但是需要修改源代码, 用Comparator 的好处是不需要修改源代码, 而是另外实现一个比较器, 当某个自定义</p>\n<p>的对象需要作比较的时候,把比较器和对象一起传递过去就可以比大小了, 并且在Comparator 里面用户可以自</p>\n<p>己实现复杂的可以通用的逻辑,使其可以匹配一些比较简单的对象,那样就可以节省很多重复劳动了。</p>\n<p>  <a href=\"http://www.cnblogs.com/sunflower627/p/3158042.html\" title=\"原文地址\">原文地址</a></p>"},{"title":"java内存溢出","date":"2016-05-10T13:54:17.000Z","_content":"\n\n\n\n\n#### java堆溢出\n\n\n\njava堆用来存储对象实例，只有不断地创建对象，并保证GC Roots到对象之间有可到达路径来避免垃圾回收机制\n\n，那么当对象的数量达到最大堆的容量后就会产生内存溢出异常。\n\n\n\nVM arguments:\n\n-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8\n\n设置堆的最大内存为20MB，最小内存也是20MB\n\n<!-- more -->\n\n```java \n\npublic class HeapOOM {\n\n    static class OOMObject{\n\n\n\n    }\n\n\n\n    public static void main(String[] args) {\n\n        List<OOMObject> list = new ArrayList<OOMObject>();\n\n        while (true){\n\n            list.add(new OOMObject());\n\n\n\n        }\n\n    }\n\n}\n\n\n\n```\n\n\n\n\n\n*** \n\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\n\tat java.util.Arrays.copyOf(Arrays.java:3210)\n\n\tat java.util.Arrays.copyOf(Arrays.java:3181)\n\n\tat java.util.ArrayList.grow(ArrayList.java:261)\n\n\tat java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)\n\n\tat java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)\n\n\tat java.util.ArrayList.add(ArrayList.java:458)\n\n\tat OutOfMemory.HeapOOM.main(HeapOOM.java:19)\n\n***\n\n\n\n#### 虚拟机栈与本地方法栈溢出\n\n注：\n\n\t* 平时所指的栈就是这一部分，或者说是虚拟机栈中的局部变量表\n\n\t* 本地方法栈与虚拟机栈类似，只不过本地方法栈为虚拟机使用的Native方法服务，即可能是别的语言实现的方法\n\n\n\n* 如果请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常\n\n* 如果虚拟机在扩展栈的时候无法申请到足够的内存空间，则抛出OutOfMemoryError异常\n\n\n\n虽然看似严谨，其实并没有卵用\n\n\n\nVM arguments: -Xss128k\n\n注： 其实不设的默认的虚拟机栈空间也并不大\n\n\t\n\n\n\n``` java\n\npublic class JavaVMStackSOF {\n\n\tprivate int stackLength = 1;\n\n\t\n\n\t\n\n\tpublic void stackLeak(){\n\n\t\tstackLength++;\n\n\t\tstackLeak();\n\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tJavaVMStackSOF oom = new JavaVMStackSOF();\n\n\t\ttry{\n\n\t\toom.stackLeak();\n\n\t\t}catch(Throwable e){\n\n\t\t\tSystem.out.println(\"stack length\"+ oom.stackLength);\n\n\t\t\tthrow e;\n\n\t\t}\n\n\t\n\n\t}\n\n}\n\n```\n\n\n\n***\n\nstack length987\n\nException in thread \"main\" java.lang.StackOverflowError\n\n\tat OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:17)\n\n\tat OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:18)\n\n\tat OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:18)\n\n***\n\n\n\n#### 方法区与运行时常量溢出\n\n\n\njdk1.7开始逐步去除永久代\n\n\n\nString.intern()是一个Native方法，他的作用是： 如果字符串常量包含一个等于此对象的字符串，则返回这个字符串的String对象；否则添加至常量池\n\n\n\nVM：-XX:PermSize=3M -XX:MaxPermSize=3M\n\n\n\n```java\n\npublic static void main(String[] args) {\n\n\t\tfor(String arg: args){\n\n\t\t\tSystem.out.println(arg);\n\n\t\t}\n\n\t\t//避免回收常量池\n\n\t\tList<String> list = new ArrayList<String>();\n\n\t\tint i = 10000000;\n\n\t\twhile(true){\n\n\t\t\t//try{\n\n\t\t\tlist.add(String.valueOf(i++).intern());\n\n\t\t//\t}catch(Throwable e){\n\n\t\t\t//\tSystem.out.println(\"添加的常量数量：\"+ i);\n\n\t\t\t//\tthrow e;\n\n\t\t\t//}\n\n\t\t}\n\n\t}\n\n```\n\n\n\n1. java1.8并不会抛出异常\n\n2. java1.7之前会抛出OutOfMemoryError: 由于常量池分配于永久代，可以通过Vm配置限制方法区的内存现在常量池的内存\n\n\n\n* JDK7中符号表被移动到 Native Heap中，字符串常量和类引用被移动到 Java Heap中。\n\n* 在 JDK8 中，永久代已完全被元空间(Meatspace)所取代。（JDK8 HotSpot JVM 使用本地内存来存储类元数据信息并称之为：元空间（Metaspace）；）\n\n\n\n\n\n##### 在jdk8中限制堆的大小会抛出如下异常\n\n##### java7也是这个结果，不知道是我编译器没配好，还是别的原因\n\n\n\n---\n\nException in thread \"main\" java.lang.OutOfMemoryError: GC overhead limit exceeded\n\n\tat java.lang.Integer.toString(Integer.java:401)\n\n\tat java.lang.String.valueOf(String.java:3099)\n\n\tat OutOfMemory.RuntimeConstantPoolOOM.main(RuntimeConstantPoolOOM.java:26)\n\nPicked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8\n\n\n\n---\n\n\n\n#### 本机直接内存泄漏\n\n* 设置直接内存大小\n\nVM:-Xmx20M -XX:MaxDirectMemorySize=10M\n\n\n\n```java\n\npublic class DirectMemoryOOM {\n\n\n\n    private static final int _1MB = 1024 * 1024;\n\n\n\n    \n\n    public static void main(String[] args) throws IllegalArgumentException,\n\n        IllegalAccessException {\n\n      // TODO Auto-generated method stub\n\n      Field unsafeField = Unsafe.class.getDeclaredFields()[0];\n\n      unsafeField.setAccessible(true);\n\n      Unsafe unsafe = (Unsafe) unsafeField.get(null);\n\n      \n\n      while(true){\n\n        unsafe.allocateMemory(_1MB);\n\n      }\n\n    }\n\n\n\n  }\n\n\n\n\n\n```\n\n\n\n\n\n","source":"_posts/java内存溢出.md","raw":"---\ntitle: java内存溢出\n\ndate: 2016-05-10 21:54:17\n\ncategories: \n\n- jvm\n\ntags: [java,jvm]\n\n---\n\n\n\n\n\n#### java堆溢出\n\n\n\njava堆用来存储对象实例，只有不断地创建对象，并保证GC Roots到对象之间有可到达路径来避免垃圾回收机制\n\n，那么当对象的数量达到最大堆的容量后就会产生内存溢出异常。\n\n\n\nVM arguments:\n\n-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8\n\n设置堆的最大内存为20MB，最小内存也是20MB\n\n<!-- more -->\n\n```java \n\npublic class HeapOOM {\n\n    static class OOMObject{\n\n\n\n    }\n\n\n\n    public static void main(String[] args) {\n\n        List<OOMObject> list = new ArrayList<OOMObject>();\n\n        while (true){\n\n            list.add(new OOMObject());\n\n\n\n        }\n\n    }\n\n}\n\n\n\n```\n\n\n\n\n\n*** \n\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\n\tat java.util.Arrays.copyOf(Arrays.java:3210)\n\n\tat java.util.Arrays.copyOf(Arrays.java:3181)\n\n\tat java.util.ArrayList.grow(ArrayList.java:261)\n\n\tat java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)\n\n\tat java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)\n\n\tat java.util.ArrayList.add(ArrayList.java:458)\n\n\tat OutOfMemory.HeapOOM.main(HeapOOM.java:19)\n\n***\n\n\n\n#### 虚拟机栈与本地方法栈溢出\n\n注：\n\n\t* 平时所指的栈就是这一部分，或者说是虚拟机栈中的局部变量表\n\n\t* 本地方法栈与虚拟机栈类似，只不过本地方法栈为虚拟机使用的Native方法服务，即可能是别的语言实现的方法\n\n\n\n* 如果请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常\n\n* 如果虚拟机在扩展栈的时候无法申请到足够的内存空间，则抛出OutOfMemoryError异常\n\n\n\n虽然看似严谨，其实并没有卵用\n\n\n\nVM arguments: -Xss128k\n\n注： 其实不设的默认的虚拟机栈空间也并不大\n\n\t\n\n\n\n``` java\n\npublic class JavaVMStackSOF {\n\n\tprivate int stackLength = 1;\n\n\t\n\n\t\n\n\tpublic void stackLeak(){\n\n\t\tstackLength++;\n\n\t\tstackLeak();\n\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tJavaVMStackSOF oom = new JavaVMStackSOF();\n\n\t\ttry{\n\n\t\toom.stackLeak();\n\n\t\t}catch(Throwable e){\n\n\t\t\tSystem.out.println(\"stack length\"+ oom.stackLength);\n\n\t\t\tthrow e;\n\n\t\t}\n\n\t\n\n\t}\n\n}\n\n```\n\n\n\n***\n\nstack length987\n\nException in thread \"main\" java.lang.StackOverflowError\n\n\tat OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:17)\n\n\tat OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:18)\n\n\tat OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:18)\n\n***\n\n\n\n#### 方法区与运行时常量溢出\n\n\n\njdk1.7开始逐步去除永久代\n\n\n\nString.intern()是一个Native方法，他的作用是： 如果字符串常量包含一个等于此对象的字符串，则返回这个字符串的String对象；否则添加至常量池\n\n\n\nVM：-XX:PermSize=3M -XX:MaxPermSize=3M\n\n\n\n```java\n\npublic static void main(String[] args) {\n\n\t\tfor(String arg: args){\n\n\t\t\tSystem.out.println(arg);\n\n\t\t}\n\n\t\t//避免回收常量池\n\n\t\tList<String> list = new ArrayList<String>();\n\n\t\tint i = 10000000;\n\n\t\twhile(true){\n\n\t\t\t//try{\n\n\t\t\tlist.add(String.valueOf(i++).intern());\n\n\t\t//\t}catch(Throwable e){\n\n\t\t\t//\tSystem.out.println(\"添加的常量数量：\"+ i);\n\n\t\t\t//\tthrow e;\n\n\t\t\t//}\n\n\t\t}\n\n\t}\n\n```\n\n\n\n1. java1.8并不会抛出异常\n\n2. java1.7之前会抛出OutOfMemoryError: 由于常量池分配于永久代，可以通过Vm配置限制方法区的内存现在常量池的内存\n\n\n\n* JDK7中符号表被移动到 Native Heap中，字符串常量和类引用被移动到 Java Heap中。\n\n* 在 JDK8 中，永久代已完全被元空间(Meatspace)所取代。（JDK8 HotSpot JVM 使用本地内存来存储类元数据信息并称之为：元空间（Metaspace）；）\n\n\n\n\n\n##### 在jdk8中限制堆的大小会抛出如下异常\n\n##### java7也是这个结果，不知道是我编译器没配好，还是别的原因\n\n\n\n---\n\nException in thread \"main\" java.lang.OutOfMemoryError: GC overhead limit exceeded\n\n\tat java.lang.Integer.toString(Integer.java:401)\n\n\tat java.lang.String.valueOf(String.java:3099)\n\n\tat OutOfMemory.RuntimeConstantPoolOOM.main(RuntimeConstantPoolOOM.java:26)\n\nPicked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8\n\n\n\n---\n\n\n\n#### 本机直接内存泄漏\n\n* 设置直接内存大小\n\nVM:-Xmx20M -XX:MaxDirectMemorySize=10M\n\n\n\n```java\n\npublic class DirectMemoryOOM {\n\n\n\n    private static final int _1MB = 1024 * 1024;\n\n\n\n    \n\n    public static void main(String[] args) throws IllegalArgumentException,\n\n        IllegalAccessException {\n\n      // TODO Auto-generated method stub\n\n      Field unsafeField = Unsafe.class.getDeclaredFields()[0];\n\n      unsafeField.setAccessible(true);\n\n      Unsafe unsafe = (Unsafe) unsafeField.get(null);\n\n      \n\n      while(true){\n\n        unsafe.allocateMemory(_1MB);\n\n      }\n\n    }\n\n\n\n  }\n\n\n\n\n\n```\n\n\n\n\n\n","slug":"java内存溢出","published":1,"updated":"2016-05-14T08:14:53.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy5uy3a4000a28rx13qarvyv","content":"<h4 id=\"java堆溢出\"><a href=\"#java堆溢出\" class=\"headerlink\" title=\"java堆溢出\"></a>java堆溢出</h4><p>java堆用来存储对象实例，只有不断地创建对象，并保证GC Roots到对象之间有可到达路径来避免垃圾回收机制</p>\n<p>，那么当对象的数量达到最大堆的容量后就会产生内存溢出异常。</p>\n<p>VM arguments:</p>\n<p>-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8</p>\n<p>设置堆的最大内存为20MB，最小内存也是20MB</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapOOM</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMObject</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;OOMObject&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;OOMObject&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> OOMObject());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>Exception in thread “main” java.lang.OutOfMemoryError: Java heap space</p>\n<pre><code>at java.util.Arrays.copyOf(Arrays.java:3210)\n\nat java.util.Arrays.copyOf(Arrays.java:3181)\n\nat java.util.ArrayList.grow(ArrayList.java:261)\n\nat java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)\n\nat java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)\n\nat java.util.ArrayList.add(ArrayList.java:458)\n\nat OutOfMemory.HeapOOM.main(HeapOOM.java:19)\n</code></pre><hr>\n<h4 id=\"虚拟机栈与本地方法栈溢出\"><a href=\"#虚拟机栈与本地方法栈溢出\" class=\"headerlink\" title=\"虚拟机栈与本地方法栈溢出\"></a>虚拟机栈与本地方法栈溢出</h4><p>注：</p>\n<pre><code>* 平时所指的栈就是这一部分，或者说是虚拟机栈中的局部变量表\n\n* 本地方法栈与虚拟机栈类似，只不过本地方法栈为虚拟机使用的Native方法服务，即可能是别的语言实现的方法\n</code></pre><ul>\n<li><p>如果请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常</p>\n</li>\n<li><p>如果虚拟机在扩展栈的时候无法申请到足够的内存空间，则抛出OutOfMemoryError异常</p>\n</li>\n</ul>\n<p>虽然看似严谨，其实并没有卵用</p>\n<p>VM arguments: -Xss128k</p>\n<p>注： 其实不设的默认的虚拟机栈空间也并不大</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaVMStackSOF</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> stackLength = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stackLeak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstackLength++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstackLeak();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tJavaVMStackSOF oom = <span class=\"keyword\">new</span> JavaVMStackSOF();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\toom.stackLeak();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Throwable e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"stack length\"</span>+ oom.stackLength);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>stack length987</p>\n<p>Exception in thread “main” java.lang.StackOverflowError</p>\n<pre><code>at OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:17)\n\nat OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:18)\n\nat OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:18)\n</code></pre><hr>\n<h4 id=\"方法区与运行时常量溢出\"><a href=\"#方法区与运行时常量溢出\" class=\"headerlink\" title=\"方法区与运行时常量溢出\"></a>方法区与运行时常量溢出</h4><p>jdk1.7开始逐步去除永久代</p>\n<p>String.intern()是一个Native方法，他的作用是： 如果字符串常量包含一个等于此对象的字符串，则返回这个字符串的String对象；否则添加至常量池</p>\n<p>VM：-XX:PermSize=3M -XX:MaxPermSize=3M</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String arg: args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//避免回收常量池</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">10000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//try&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tlist.add(String.valueOf(i++).intern());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//\t&#125;catch(Throwable e)&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//\tSystem.out.println(\"添加的常量数量：\"+ i);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//\tthrow e;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>java1.8并不会抛出异常</p>\n</li>\n<li><p>java1.7之前会抛出OutOfMemoryError: 由于常量池分配于永久代，可以通过Vm配置限制方法区的内存现在常量池的内存</p>\n</li>\n</ol>\n<ul>\n<li><p>JDK7中符号表被移动到 Native Heap中，字符串常量和类引用被移动到 Java Heap中。</p>\n</li>\n<li><p>在 JDK8 中，永久代已完全被元空间(Meatspace)所取代。（JDK8 HotSpot JVM 使用本地内存来存储类元数据信息并称之为：元空间（Metaspace）；）</p>\n</li>\n</ul>\n<h5 id=\"在jdk8中限制堆的大小会抛出如下异常\"><a href=\"#在jdk8中限制堆的大小会抛出如下异常\" class=\"headerlink\" title=\"在jdk8中限制堆的大小会抛出如下异常\"></a>在jdk8中限制堆的大小会抛出如下异常</h5><h5 id=\"java7也是这个结果，不知道是我编译器没配好，还是别的原因\"><a href=\"#java7也是这个结果，不知道是我编译器没配好，还是别的原因\" class=\"headerlink\" title=\"java7也是这个结果，不知道是我编译器没配好，还是别的原因\"></a>java7也是这个结果，不知道是我编译器没配好，还是别的原因</h5><hr>\n<p>Exception in thread “main” java.lang.OutOfMemoryError: GC overhead limit exceeded</p>\n<pre><code>at java.lang.Integer.toString(Integer.java:401)\n\nat java.lang.String.valueOf(String.java:3099)\n\nat OutOfMemory.RuntimeConstantPoolOOM.main(RuntimeConstantPoolOOM.java:26)\n</code></pre><p>Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8</p>\n<hr>\n<h4 id=\"本机直接内存泄漏\"><a href=\"#本机直接内存泄漏\" class=\"headerlink\" title=\"本机直接内存泄漏\"></a>本机直接内存泄漏</h4><ul>\n<li>设置直接内存大小</li>\n</ul>\n<p>VM:-Xmx20M -XX:MaxDirectMemorySize=10M</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectMemoryOOM</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> _1MB = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IllegalArgumentException,</span><br><span class=\"line\"></span><br><span class=\"line\">        IllegalAccessException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Field unsafeField = Unsafe.class.getDeclaredFields()[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      unsafeField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      Unsafe unsafe = (Unsafe) unsafeField.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        unsafe.allocateMemory(_1MB);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<h4 id=\"java堆溢出\"><a href=\"#java堆溢出\" class=\"headerlink\" title=\"java堆溢出\"></a>java堆溢出</h4><p>java堆用来存储对象实例，只有不断地创建对象，并保证GC Roots到对象之间有可到达路径来避免垃圾回收机制</p>\n<p>，那么当对象的数量达到最大堆的容量后就会产生内存溢出异常。</p>\n<p>VM arguments:</p>\n<p>-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8</p>\n<p>设置堆的最大内存为20MB，最小内存也是20MB</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapOOM</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMObject</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;OOMObject&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;OOMObject&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> OOMObject());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>Exception in thread “main” java.lang.OutOfMemoryError: Java heap space</p>\n<pre><code>at java.util.Arrays.copyOf(Arrays.java:3210)\n\nat java.util.Arrays.copyOf(Arrays.java:3181)\n\nat java.util.ArrayList.grow(ArrayList.java:261)\n\nat java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)\n\nat java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)\n\nat java.util.ArrayList.add(ArrayList.java:458)\n\nat OutOfMemory.HeapOOM.main(HeapOOM.java:19)\n</code></pre><hr>\n<h4 id=\"虚拟机栈与本地方法栈溢出\"><a href=\"#虚拟机栈与本地方法栈溢出\" class=\"headerlink\" title=\"虚拟机栈与本地方法栈溢出\"></a>虚拟机栈与本地方法栈溢出</h4><p>注：</p>\n<pre><code>* 平时所指的栈就是这一部分，或者说是虚拟机栈中的局部变量表\n\n* 本地方法栈与虚拟机栈类似，只不过本地方法栈为虚拟机使用的Native方法服务，即可能是别的语言实现的方法\n</code></pre><ul>\n<li><p>如果请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常</p>\n</li>\n<li><p>如果虚拟机在扩展栈的时候无法申请到足够的内存空间，则抛出OutOfMemoryError异常</p>\n</li>\n</ul>\n<p>虽然看似严谨，其实并没有卵用</p>\n<p>VM arguments: -Xss128k</p>\n<p>注： 其实不设的默认的虚拟机栈空间也并不大</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaVMStackSOF</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> stackLength = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stackLeak</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstackLength++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstackLeak();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tJavaVMStackSOF oom = <span class=\"keyword\">new</span> JavaVMStackSOF();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\toom.stackLeak();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Throwable e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"stack length\"</span>+ oom.stackLength);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>stack length987</p>\n<p>Exception in thread “main” java.lang.StackOverflowError</p>\n<pre><code>at OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:17)\n\nat OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:18)\n\nat OutOfMemory.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:18)\n</code></pre><hr>\n<h4 id=\"方法区与运行时常量溢出\"><a href=\"#方法区与运行时常量溢出\" class=\"headerlink\" title=\"方法区与运行时常量溢出\"></a>方法区与运行时常量溢出</h4><p>jdk1.7开始逐步去除永久代</p>\n<p>String.intern()是一个Native方法，他的作用是： 如果字符串常量包含一个等于此对象的字符串，则返回这个字符串的String对象；否则添加至常量池</p>\n<p>VM：-XX:PermSize=3M -XX:MaxPermSize=3M</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String arg: args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//避免回收常量池</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">10000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//try&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tlist.add(String.valueOf(i++).intern());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//\t&#125;catch(Throwable e)&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//\tSystem.out.println(\"添加的常量数量：\"+ i);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//\tthrow e;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>java1.8并不会抛出异常</p>\n</li>\n<li><p>java1.7之前会抛出OutOfMemoryError: 由于常量池分配于永久代，可以通过Vm配置限制方法区的内存现在常量池的内存</p>\n</li>\n</ol>\n<ul>\n<li><p>JDK7中符号表被移动到 Native Heap中，字符串常量和类引用被移动到 Java Heap中。</p>\n</li>\n<li><p>在 JDK8 中，永久代已完全被元空间(Meatspace)所取代。（JDK8 HotSpot JVM 使用本地内存来存储类元数据信息并称之为：元空间（Metaspace）；）</p>\n</li>\n</ul>\n<h5 id=\"在jdk8中限制堆的大小会抛出如下异常\"><a href=\"#在jdk8中限制堆的大小会抛出如下异常\" class=\"headerlink\" title=\"在jdk8中限制堆的大小会抛出如下异常\"></a>在jdk8中限制堆的大小会抛出如下异常</h5><h5 id=\"java7也是这个结果，不知道是我编译器没配好，还是别的原因\"><a href=\"#java7也是这个结果，不知道是我编译器没配好，还是别的原因\" class=\"headerlink\" title=\"java7也是这个结果，不知道是我编译器没配好，还是别的原因\"></a>java7也是这个结果，不知道是我编译器没配好，还是别的原因</h5><hr>\n<p>Exception in thread “main” java.lang.OutOfMemoryError: GC overhead limit exceeded</p>\n<pre><code>at java.lang.Integer.toString(Integer.java:401)\n\nat java.lang.String.valueOf(String.java:3099)\n\nat OutOfMemory.RuntimeConstantPoolOOM.main(RuntimeConstantPoolOOM.java:26)\n</code></pre><p>Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8</p>\n<hr>\n<h4 id=\"本机直接内存泄漏\"><a href=\"#本机直接内存泄漏\" class=\"headerlink\" title=\"本机直接内存泄漏\"></a>本机直接内存泄漏</h4><ul>\n<li>设置直接内存大小</li>\n</ul>\n<p>VM:-Xmx20M -XX:MaxDirectMemorySize=10M</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectMemoryOOM</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> _1MB = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IllegalArgumentException,</span><br><span class=\"line\"></span><br><span class=\"line\">        IllegalAccessException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Field unsafeField = Unsafe.class.getDeclaredFields()[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      unsafeField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      Unsafe unsafe = (Unsafe) unsafeField.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        unsafe.allocateMemory(_1MB);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>"},{"title":"爬取教务在线学生相片","date":"2016-05-14T10:43:19.000Z","_content":"\n最近看了下python,发现python用来做爬虫确实方便，就随手爬去了学校教务在线的学生照片，用到了正则匹配与python的request模块。以下是爬虫代码。\n\n<!-- more -->\n\n\n``` python\n#-*_coding:utf8-*-\nimport requests\nfrom imp import reload\nimport re\n\n\n\nclass spider(object):\n    def __init__(self):\n        print( u'开始爬取内容。。。')\n\n#getsource用来获取网页源代码\n    def getsource(self,url):\n        html = requests.get(url)\n        return html.text\n\n#total_page 表示结束的学号\n#range 表示起始学号\nif __name__ == '__main__':\n    url = 'http://jwzx.cqupt.edu.cn/showstuPic.php?xh=2014213194'\n    html = 'http://jwzx.cqupt.edu.cn/showstuPic.php?xh=2014213194'\n    total_page = 2014213230\n\n    for i in range(2014213180,total_page+1):\n        new_link = re.sub('xh=\\d+','xh=%d'%i,html,re.S)\n        print (new_link)\n        pic = requests.get(new_link)\n        fp = open('pic2\\\\' + str(i) + '.jpg','wb')\n        fp.write(pic.content)\n        fp.close()\n\n```","source":"_posts/爬取教务在线学生相片.md","raw":"---\ntitle: 爬取教务在线学生相片\ndate: 2016-05-14 18:43:19\ntags: [python]\ncategory: [python]\n\n---\n\n最近看了下python,发现python用来做爬虫确实方便，就随手爬去了学校教务在线的学生照片，用到了正则匹配与python的request模块。以下是爬虫代码。\n\n<!-- more -->\n\n\n``` python\n#-*_coding:utf8-*-\nimport requests\nfrom imp import reload\nimport re\n\n\n\nclass spider(object):\n    def __init__(self):\n        print( u'开始爬取内容。。。')\n\n#getsource用来获取网页源代码\n    def getsource(self,url):\n        html = requests.get(url)\n        return html.text\n\n#total_page 表示结束的学号\n#range 表示起始学号\nif __name__ == '__main__':\n    url = 'http://jwzx.cqupt.edu.cn/showstuPic.php?xh=2014213194'\n    html = 'http://jwzx.cqupt.edu.cn/showstuPic.php?xh=2014213194'\n    total_page = 2014213230\n\n    for i in range(2014213180,total_page+1):\n        new_link = re.sub('xh=\\d+','xh=%d'%i,html,re.S)\n        print (new_link)\n        pic = requests.get(new_link)\n        fp = open('pic2\\\\' + str(i) + '.jpg','wb')\n        fp.write(pic.content)\n        fp.close()\n\n```","slug":"爬取教务在线学生相片","published":1,"updated":"2016-05-14T11:01:30.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy5uy3ax000c28rxb0hg24h0","content":"<p>最近看了下python,发现python用来做爬虫确实方便，就随手爬去了学校教务在线的学生照片，用到了正则匹配与python的request模块。以下是爬虫代码。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*_coding:utf8-*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> imp <span class=\"keyword\">import</span> reload</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">spider</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print( <span class=\"string\">u'开始爬取内容。。。'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#getsource用来获取网页源代码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsource</span><span class=\"params\">(self,url)</span>:</span></span><br><span class=\"line\">        html = requests.get(url)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> html.text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#total_page 表示结束的学号</span></span><br><span class=\"line\"><span class=\"comment\">#range 表示起始学号</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    url = <span class=\"string\">'http://jwzx.cqupt.edu.cn/showstuPic.php?xh=2014213194'</span></span><br><span class=\"line\">    html = <span class=\"string\">'http://jwzx.cqupt.edu.cn/showstuPic.php?xh=2014213194'</span></span><br><span class=\"line\">    total_page = <span class=\"number\">2014213230</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2014213180</span>,total_page+<span class=\"number\">1</span>):</span><br><span class=\"line\">        new_link = re.sub(<span class=\"string\">'xh=\\d+'</span>,<span class=\"string\">'xh=%d'</span>%i,html,re.S)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (new_link)</span><br><span class=\"line\">        pic = requests.get(new_link)</span><br><span class=\"line\">        fp = open(<span class=\"string\">'pic2\\\\'</span> + str(i) + <span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)</span><br><span class=\"line\">        fp.write(pic.content)</span><br><span class=\"line\">        fp.close()</span><br></pre></td></tr></table></figure>","excerpt":"<p>最近看了下python,发现python用来做爬虫确实方便，就随手爬去了学校教务在线的学生照片，用到了正则匹配与python的request模块。以下是爬虫代码。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*_coding:utf8-*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> imp <span class=\"keyword\">import</span> reload</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">spider</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print( <span class=\"string\">u'开始爬取内容。。。'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#getsource用来获取网页源代码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsource</span><span class=\"params\">(self,url)</span>:</span></span><br><span class=\"line\">        html = requests.get(url)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> html.text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#total_page 表示结束的学号</span></span><br><span class=\"line\"><span class=\"comment\">#range 表示起始学号</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    url = <span class=\"string\">'http://jwzx.cqupt.edu.cn/showstuPic.php?xh=2014213194'</span></span><br><span class=\"line\">    html = <span class=\"string\">'http://jwzx.cqupt.edu.cn/showstuPic.php?xh=2014213194'</span></span><br><span class=\"line\">    total_page = <span class=\"number\">2014213230</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2014213180</span>,total_page+<span class=\"number\">1</span>):</span><br><span class=\"line\">        new_link = re.sub(<span class=\"string\">'xh=\\d+'</span>,<span class=\"string\">'xh=%d'</span>%i,html,re.S)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (new_link)</span><br><span class=\"line\">        pic = requests.get(new_link)</span><br><span class=\"line\">        fp = open(<span class=\"string\">'pic2\\\\'</span> + str(i) + <span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)</span><br><span class=\"line\">        fp.write(pic.content)</span><br><span class=\"line\">        fp.close()</span><br></pre></td></tr></table></figure>"},{"title":"知识库","date":"2016-05-19T14:53:04.000Z","_content":"## 0x1 序\n> ** 这篇博客收录了一些我品读过大牛的优秀的博文 ！**\n<!-- more-->\n## 0x2 程序人生\n> [程序员技术练级攻略](http://coolshell.cn/articles/4990.html)\n> [别的程序员是怎么读你的简历的](http://coolshell.cn/articles/1695.html)\n\n## 0x3 算法\n> [LeetCode算法题目解答汇总](http://www.raychase.net/2763)\n\n## 0x4 数据库\n> [MySQL性能优化的最佳20+条经验](http://coolshell.cn/articles/1846.html)\n\n## 0x5 jvm\n> [Java PermGen 去哪里了?](http://ifeve.com/java-permgen-removed/)\n\n## 0x6 java框架技术\n> [69道Spring面试题和答案](http://ifeve.com/spring-interview-questions-and-answers/)\n\n## 0x7 java基础\n> [【Java集合源码剖析】HashMap源码剖析](http://blog.csdn.net/ns_code/article/details/36034955)\n> [【Java集合源码剖析】ArrayList源码剖析](http://blog.csdn.net/ns_code/article/details/35568011)\n>  [攻破JAVA NIO技术壁垒](http://www.importnew.com/19816.html)\n\n## 0x8 编译原理\n> [Sum编译器](http://acbingo.cn/2016/03/29/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86_%E4%B8%AD%E7%A7%91%E5%A4%A7%E5%85%AC%E5%BC%80%E8%AF%BE_%E7%AC%AC%E4%B8%80%E5%8D%95%E5%85%83%E7%BC%96%E8%AF%91%E5%99%A8%E4%BB%8B%E7%BB%8D%E4%BD%9C%E4%B8%9A/)\n> [一个词法分析器的简单实现](http://www.kawabangga.com/posts/1147)\n\n## 0x9 系统设计\n> [DAO的演进](http://www.raychase.net/730)","source":"_posts/知识库.md","raw":"---\ntitle: 知识库\ndate: 2016-05-19 22:53:04\ntags: 其他\ncategory: 其他\n\n---\n## 0x1 序\n> ** 这篇博客收录了一些我品读过大牛的优秀的博文 ！**\n<!-- more-->\n## 0x2 程序人生\n> [程序员技术练级攻略](http://coolshell.cn/articles/4990.html)\n> [别的程序员是怎么读你的简历的](http://coolshell.cn/articles/1695.html)\n\n## 0x3 算法\n> [LeetCode算法题目解答汇总](http://www.raychase.net/2763)\n\n## 0x4 数据库\n> [MySQL性能优化的最佳20+条经验](http://coolshell.cn/articles/1846.html)\n\n## 0x5 jvm\n> [Java PermGen 去哪里了?](http://ifeve.com/java-permgen-removed/)\n\n## 0x6 java框架技术\n> [69道Spring面试题和答案](http://ifeve.com/spring-interview-questions-and-answers/)\n\n## 0x7 java基础\n> [【Java集合源码剖析】HashMap源码剖析](http://blog.csdn.net/ns_code/article/details/36034955)\n> [【Java集合源码剖析】ArrayList源码剖析](http://blog.csdn.net/ns_code/article/details/35568011)\n>  [攻破JAVA NIO技术壁垒](http://www.importnew.com/19816.html)\n\n## 0x8 编译原理\n> [Sum编译器](http://acbingo.cn/2016/03/29/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86_%E4%B8%AD%E7%A7%91%E5%A4%A7%E5%85%AC%E5%BC%80%E8%AF%BE_%E7%AC%AC%E4%B8%80%E5%8D%95%E5%85%83%E7%BC%96%E8%AF%91%E5%99%A8%E4%BB%8B%E7%BB%8D%E4%BD%9C%E4%B8%9A/)\n> [一个词法分析器的简单实现](http://www.kawabangga.com/posts/1147)\n\n## 0x9 系统设计\n> [DAO的演进](http://www.raychase.net/730)","slug":"知识库","published":1,"updated":"2016-05-29T11:47:05.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy5uy3b7000e28rxqrcyh8tl","content":"<h2 id=\"0x1-序\"><a href=\"#0x1-序\" class=\"headerlink\" title=\"0x1 序\"></a>0x1 序</h2><blockquote>\n<p><strong> 这篇博客收录了一些我品读过大牛的优秀的博文 ！</strong><br><a id=\"more\"></a></p>\n<h2 id=\"0x2-程序人生\"><a href=\"#0x2-程序人生\" class=\"headerlink\" title=\"0x2 程序人生\"></a>0x2 程序人生</h2><p><a href=\"http://coolshell.cn/articles/4990.html\" target=\"_blank\" rel=\"external\">程序员技术练级攻略</a><br><a href=\"http://coolshell.cn/articles/1695.html\" target=\"_blank\" rel=\"external\">别的程序员是怎么读你的简历的</a></p>\n</blockquote>\n<h2 id=\"0x3-算法\"><a href=\"#0x3-算法\" class=\"headerlink\" title=\"0x3 算法\"></a>0x3 算法</h2><blockquote>\n<p><a href=\"http://www.raychase.net/2763\" target=\"_blank\" rel=\"external\">LeetCode算法题目解答汇总</a></p>\n</blockquote>\n<h2 id=\"0x4-数据库\"><a href=\"#0x4-数据库\" class=\"headerlink\" title=\"0x4 数据库\"></a>0x4 数据库</h2><blockquote>\n<p><a href=\"http://coolshell.cn/articles/1846.html\" target=\"_blank\" rel=\"external\">MySQL性能优化的最佳20+条经验</a></p>\n</blockquote>\n<h2 id=\"0x5-jvm\"><a href=\"#0x5-jvm\" class=\"headerlink\" title=\"0x5 jvm\"></a>0x5 jvm</h2><blockquote>\n<p><a href=\"http://ifeve.com/java-permgen-removed/\" target=\"_blank\" rel=\"external\">Java PermGen 去哪里了?</a></p>\n</blockquote>\n<h2 id=\"0x6-java框架技术\"><a href=\"#0x6-java框架技术\" class=\"headerlink\" title=\"0x6 java框架技术\"></a>0x6 java框架技术</h2><blockquote>\n<p><a href=\"http://ifeve.com/spring-interview-questions-and-answers/\" target=\"_blank\" rel=\"external\">69道Spring面试题和答案</a></p>\n</blockquote>\n<h2 id=\"0x7-java基础\"><a href=\"#0x7-java基础\" class=\"headerlink\" title=\"0x7 java基础\"></a>0x7 java基础</h2><blockquote>\n<p><a href=\"http://blog.csdn.net/ns_code/article/details/36034955\" target=\"_blank\" rel=\"external\">【Java集合源码剖析】HashMap源码剖析</a><br><a href=\"http://blog.csdn.net/ns_code/article/details/35568011\" target=\"_blank\" rel=\"external\">【Java集合源码剖析】ArrayList源码剖析</a><br> <a href=\"http://www.importnew.com/19816.html\" target=\"_blank\" rel=\"external\">攻破JAVA NIO技术壁垒</a></p>\n</blockquote>\n<h2 id=\"0x8-编译原理\"><a href=\"#0x8-编译原理\" class=\"headerlink\" title=\"0x8 编译原理\"></a>0x8 编译原理</h2><blockquote>\n<p><a href=\"http://acbingo.cn/2016/03/29/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86_%E4%B8%AD%E7%A7%91%E5%A4%A7%E5%85%AC%E5%BC%80%E8%AF%BE_%E7%AC%AC%E4%B8%80%E5%8D%95%E5%85%83%E7%BC%96%E8%AF%91%E5%99%A8%E4%BB%8B%E7%BB%8D%E4%BD%9C%E4%B8%9A/\" target=\"_blank\" rel=\"external\">Sum编译器</a><br><a href=\"http://www.kawabangga.com/posts/1147\" target=\"_blank\" rel=\"external\">一个词法分析器的简单实现</a></p>\n</blockquote>\n<h2 id=\"0x9-系统设计\"><a href=\"#0x9-系统设计\" class=\"headerlink\" title=\"0x9 系统设计\"></a>0x9 系统设计</h2><blockquote>\n<p><a href=\"http://www.raychase.net/730\" target=\"_blank\" rel=\"external\">DAO的演进</a></p>\n</blockquote>\n","excerpt":"<h2 id=\"0x1-序\"><a href=\"#0x1-序\" class=\"headerlink\" title=\"0x1 序\"></a>0x1 序</h2><blockquote>\n<p><strong> 这篇博客收录了一些我品读过大牛的优秀的博文 ！</strong><br>","more":"</p>\n<h2 id=\"0x2-程序人生\"><a href=\"#0x2-程序人生\" class=\"headerlink\" title=\"0x2 程序人生\"></a>0x2 程序人生</h2><p><a href=\"http://coolshell.cn/articles/4990.html\">程序员技术练级攻略</a><br><a href=\"http://coolshell.cn/articles/1695.html\">别的程序员是怎么读你的简历的</a></p>\n</blockquote>\n<h2 id=\"0x3-算法\"><a href=\"#0x3-算法\" class=\"headerlink\" title=\"0x3 算法\"></a>0x3 算法</h2><blockquote>\n<p><a href=\"http://www.raychase.net/2763\">LeetCode算法题目解答汇总</a></p>\n</blockquote>\n<h2 id=\"0x4-数据库\"><a href=\"#0x4-数据库\" class=\"headerlink\" title=\"0x4 数据库\"></a>0x4 数据库</h2><blockquote>\n<p><a href=\"http://coolshell.cn/articles/1846.html\">MySQL性能优化的最佳20+条经验</a></p>\n</blockquote>\n<h2 id=\"0x5-jvm\"><a href=\"#0x5-jvm\" class=\"headerlink\" title=\"0x5 jvm\"></a>0x5 jvm</h2><blockquote>\n<p><a href=\"http://ifeve.com/java-permgen-removed/\">Java PermGen 去哪里了?</a></p>\n</blockquote>\n<h2 id=\"0x6-java框架技术\"><a href=\"#0x6-java框架技术\" class=\"headerlink\" title=\"0x6 java框架技术\"></a>0x6 java框架技术</h2><blockquote>\n<p><a href=\"http://ifeve.com/spring-interview-questions-and-answers/\">69道Spring面试题和答案</a></p>\n</blockquote>\n<h2 id=\"0x7-java基础\"><a href=\"#0x7-java基础\" class=\"headerlink\" title=\"0x7 java基础\"></a>0x7 java基础</h2><blockquote>\n<p><a href=\"http://blog.csdn.net/ns_code/article/details/36034955\">【Java集合源码剖析】HashMap源码剖析</a><br><a href=\"http://blog.csdn.net/ns_code/article/details/35568011\">【Java集合源码剖析】ArrayList源码剖析</a><br> <a href=\"http://www.importnew.com/19816.html\">攻破JAVA NIO技术壁垒</a></p>\n</blockquote>\n<h2 id=\"0x8-编译原理\"><a href=\"#0x8-编译原理\" class=\"headerlink\" title=\"0x8 编译原理\"></a>0x8 编译原理</h2><blockquote>\n<p><a href=\"http://acbingo.cn/2016/03/29/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86_%E4%B8%AD%E7%A7%91%E5%A4%A7%E5%85%AC%E5%BC%80%E8%AF%BE_%E7%AC%AC%E4%B8%80%E5%8D%95%E5%85%83%E7%BC%96%E8%AF%91%E5%99%A8%E4%BB%8B%E7%BB%8D%E4%BD%9C%E4%B8%9A/\">Sum编译器</a><br><a href=\"http://www.kawabangga.com/posts/1147\">一个词法分析器的简单实现</a></p>\n</blockquote>\n<h2 id=\"0x9-系统设计\"><a href=\"#0x9-系统设计\" class=\"headerlink\" title=\"0x9 系统设计\"></a>0x9 系统设计</h2><blockquote>\n<p><a href=\"http://www.raychase.net/730\">DAO的演进</a></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciy5uy39h000828rx4p68m2vy","category_id":"ciy5uy391000528rxs3sczxo2","_id":"ciy5uy3b5000d28rxyh2sqsb5"},{"post_id":"ciy5uy36s000028rxphsdek6s","category_id":"ciy5uy391000528rxs3sczxo2","_id":"ciy5uy3bi000h28rxo64l79do"},{"post_id":"ciy5uy37t000228rxuit6ousq","category_id":"ciy5uy3at000b28rx3g73xw21","_id":"ciy5uy3bm000i28rxe4lzrgwn"},{"post_id":"ciy5uy393000628rxr1eob2zd","category_id":"ciy5uy3bh000g28rxxpihcz1c","_id":"ciy5uy3c3000n28rx66afkpil"},{"post_id":"ciy5uy3a4000a28rx13qarvyv","category_id":"ciy5uy3bh000g28rxxpihcz1c","_id":"ciy5uy3cc000r28rx7n7cpsav"},{"post_id":"ciy5uy3ax000c28rxb0hg24h0","category_id":"ciy5uy3c7000p28rxn5cyusgv","_id":"ciy5uy3ch000u28rxb1uszk98"},{"post_id":"ciy5uy3b7000e28rxqrcyh8tl","category_id":"ciy5uy3cf000t28rxg7f7qsv5","_id":"ciy5uy3cp000z28rxwkp4kw4j"}],"PostTag":[{"post_id":"ciy5uy36s000028rxphsdek6s","tag_id":"ciy5uy38p000428rxggfhvela","_id":"ciy5uy3bv000l28rx9idq4ufj"},{"post_id":"ciy5uy36s000028rxphsdek6s","tag_id":"ciy5uy3a3000928rxblki8q4q","_id":"ciy5uy3c2000m28rxlfs5zk9q"},{"post_id":"ciy5uy36s000028rxphsdek6s","tag_id":"ciy5uy3be000f28rxx4dyiv8y","_id":"ciy5uy3c9000q28rxz6a7qhv0"},{"post_id":"ciy5uy37t000228rxuit6ousq","tag_id":"ciy5uy38p000428rxggfhvela","_id":"ciy5uy3cl000w28rx6vkw761m"},{"post_id":"ciy5uy37t000228rxuit6ousq","tag_id":"ciy5uy3be000f28rxx4dyiv8y","_id":"ciy5uy3cn000x28rxrkc2dgop"},{"post_id":"ciy5uy37t000228rxuit6ousq","tag_id":"ciy5uy3cd000s28rxjvk1zr75","_id":"ciy5uy3cq001028rxqfwt53tt"},{"post_id":"ciy5uy393000628rxr1eob2zd","tag_id":"ciy5uy3a3000928rxblki8q4q","_id":"ciy5uy3ct001228rxwxknq0m4"},{"post_id":"ciy5uy393000628rxr1eob2zd","tag_id":"ciy5uy3co000y28rx104zqmqc","_id":"ciy5uy3cx001328rxal55ibgy"},{"post_id":"ciy5uy39h000828rx4p68m2vy","tag_id":"ciy5uy3a3000928rxblki8q4q","_id":"ciy5uy3d1001528rx1swo2m1x"},{"post_id":"ciy5uy3a4000a28rx13qarvyv","tag_id":"ciy5uy3a3000928rxblki8q4q","_id":"ciy5uy3da001828rxja5b2v93"},{"post_id":"ciy5uy3a4000a28rx13qarvyv","tag_id":"ciy5uy3co000y28rx104zqmqc","_id":"ciy5uy3da001928rxj01zk3l3"},{"post_id":"ciy5uy3ax000c28rxb0hg24h0","tag_id":"ciy5uy3d9001728rx5mojumwg","_id":"ciy5uy3df001b28rxyv98zjuv"},{"post_id":"ciy5uy3b7000e28rxqrcyh8tl","tag_id":"ciy5uy3dd001a28rxmzer07bx","_id":"ciy5uy3di001c28rxhvqsuh94"}],"Tag":[{"name":"leetcode","_id":"ciy5uy38p000428rxggfhvela"},{"name":"java","_id":"ciy5uy3a3000928rxblki8q4q"},{"name":"算法","_id":"ciy5uy3be000f28rxx4dyiv8y"},{"name":"interesting","_id":"ciy5uy3cd000s28rxjvk1zr75"},{"name":"jvm","_id":"ciy5uy3co000y28rx104zqmqc"},{"name":"python","_id":"ciy5uy3d9001728rx5mojumwg"},{"name":"其他","_id":"ciy5uy3dd001a28rxmzer07bx"}]}}